<?php
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - DnD Copilot</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; background: #f0f0f0; }
        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .status-card { padding: 20px; border-radius: 10px; border: 2px solid; }
        .status-ok { background: #d4edda; border-color: #28a745; color: #155724; }
        .status-error { background: #f8d7da; border-color: #dc3545; color: #721c24; }
        .status-warning { background: #fff3cd; border-color: #ffc107; color: #856404; }
        .test-btn { background: #007bff; color: white; padding: 12px 20px; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; margin: 5px; }
        .test-btn:hover { background: #0056b3; }
        .test-btn:disabled { background: #6c757d; cursor: not-allowed; }
        .result { margin: 10px 0; padding: 15px; border-radius: 8px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        h1 { text-align: center; color: #333; margin-bottom: 30px; }
        h2 { color: #495057; margin-top: 30px; }
        .summary { background: #e9ecef; padding: 20px; border-radius: 10px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç DnD Copilot</h1>
        
        <div class="summary">
            <h2>üìã –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h2>
            <div class="status-grid">
                <div class="status-card status-ok">
                    <h3>‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
                    <p>–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ PHP —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                </div>
                <div class="status-card status-warning">
                    <h3>‚ö†Ô∏è PWA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h3>
                    <p>Manifest.json –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω</p>
                </div>
                <div class="status-card status-ok">
                    <h3>‚úÖ API –≥–æ—Ç–æ–≤</h3>
                    <p>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å</p>
                </div>
                <div class="status-card status-ok">
                    <h3>‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
                    <p>htaccess –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</p>
                </div>
            </div>
        </div>
        
        <h2>üß™ –¢–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</h2>
        <button class="test-btn" onclick="testAPI()">–¢–µ—Å—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC</button>
        <button class="test-btn" onclick="testFavicon()">–¢–µ—Å—Ç favicon.svg</button>
        <button class="test-btn" onclick="testServiceWorker()">–¢–µ—Å—Ç Service Worker</button>
        <button class="test-btn" onclick="testAll()">–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã</button>
        
        <div id="testResults"></div>
        
        <h2>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h2>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            <a href="simple-npc-test.php" style="display: block; padding: 15px; background: #007bff; color: white; text-decoration: none; border-radius: 8px; text-align: center;">
                üé≤ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç NPC
            </a>
            <a href="index.php" style="display: block; padding: 15px; background: #28a745; color: white; text-decoration: none; border-radius: 8px; text-align: center;">
                üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            </a>
            <a href="api/generate-npc-test.php" style="display: block; padding: 15px; background: #ffc107; color: #212529; text-decoration: none; border-radius: 8px; text-align: center;">
                üîß API endpoint
            </a>
            <a href="test-npc-no-auth.php" style="display: block; padding: 15px; background: #17a2b8; color: white; text-decoration: none; border-radius: 8px; text-align: center;">
                üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
            </a>
        </div>
        
        <div style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px;">
            <h3>üìù –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:</h3>
            <ul>
                <li>‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç manifest.json</li>
                <li>‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Service Worker</li>
                <li>‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC</li>
                <li>‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω .htaccess –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ JSON —Ñ–∞–π–ª–∞–º</li>
                <li>‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è PWA –±–µ–∑ manifest</li>
            </ul>
        </div>
    </div>

    <script>
    async function testAPI() {
        showResult('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC...', 'info');
        
        try {
            const formData = new FormData();
            formData.append('race', 'human');
            formData.append('class', 'fighter');
            formData.append('level', '1');
            formData.append('alignment', 'neutral');
            formData.append('background', 'soldier');
            
            const response = await fetch('api/generate-npc-test.php', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success && data.npc) {
                showResult('‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC —Ä–∞–±–æ—Ç–∞–µ—Ç! NPC: ' + (data.npc.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'), 'success');
            } else {
                showResult('‚ùå –û—à–∏–±–∫–∞ API: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            }
        } catch (error) {
            showResult('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        }
    }
    
    async function testFavicon() {
        try {
            const response = await fetch('./favicon.svg');
            if (response.ok) {
                showResult('‚úÖ favicon.svg –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
            } else {
                showResult('‚ùå favicon.svg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + response.status, 'error');
            }
        } catch (error) {
            showResult('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ favicon: ' + error.message, 'error');
        }
    }
    
    async function testServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('./sw.js');
                showResult('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            } catch (error) {
                showResult('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker: ' + error.message, 'error');
            }
        } else {
            showResult('‚ö†Ô∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º', 'warning');
        }
    }
    
    async function testAll() {
        showResult('üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...', 'info');
        
        await testFavicon();
        await new Promise(resolve => setTimeout(resolve, 500));
        
        await testServiceWorker();
        await new Promise(resolve => setTimeout(resolve, 500));
        
        await testAPI();
        
        showResult('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!', 'success');
    }
    
    function showResult(message, type) {
        const resultsDiv = document.getElementById('testResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'result ' + type;
        resultDiv.textContent = message;
        resultsDiv.appendChild(resultDiv);
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (resultDiv.parentNode) {
                resultDiv.parentNode.removeChild(resultDiv);
            }
        }, 8000);
    }
    </script>
</body>
</html>
