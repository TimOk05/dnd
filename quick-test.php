<?php
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç - DnD Copilot</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .result { margin: 10px 0; padding: 10px; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        .info { background: #d1ecf1; color: #0c5460; }
        .test-btn { padding: 10px 20px; margin: 5px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <h1>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h1>
    
    <div class="result info">
        <h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:</h2>
        <?php
        $files = [
            'manifest.json' => __DIR__ . '/manifest.json',
            'favicon.svg' => __DIR__ . '/favicon.svg',
            'sw.js' => __DIR__ . '/sw.js',
            'api/dnd-api.php' => __DIR__ . '/api/dnd-api.php'
        ];
        
        foreach ($files as $name => $path) {
            $exists = file_exists($path);
            $readable = is_readable($path);
            $size = $exists ? filesize($path) : 0;
            echo "<p><strong>$name:</strong> " . 
                 ($exists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") . 
                 ($readable ? " ‚úÖ –ß–∏—Ç–∞–µ—Ç—Å—è" : " ‚ùå –ù–µ —á–∏—Ç–∞–µ—Ç—Å—è") . 
                 ($size > 0 ? " ($size –±–∞–π—Ç)" : "") . 
                 "</p>";
        }
        ?>
    </div>
    
    <div class="result info">
        <h2>–¢–µ—Å—Ç—ã:</h2>
        <button class="test-btn" onclick="testManifest()">–¢–µ—Å—Ç manifest.json</button>
        <button class="test-btn" onclick="testFavicon()">–¢–µ—Å—Ç favicon.svg</button>
        <button class="test-btn" onclick="testServiceWorker()">–¢–µ—Å—Ç Service Worker</button>
        <button class="test-btn" onclick="testNPCGeneration()">–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC</button>
        <div id="testResults"></div>
    </div>
    
    <div class="result info">
        <h2>–ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏:</h2>
        <p><a href="./manifest.json" target="_blank">manifest.json</a></p>
        <p><a href="./favicon.svg" target="_blank">favicon.svg</a></p>
        <p><a href="./sw.js" target="_blank">sw.js</a></p>
        <p><a href="./api/generate-npc-test.php" target="_blank">API —Ç–µ—Å—Ç</a></p>
    </div>
    
    <script>
    function testManifest() {
        fetch('./manifest.json')
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('HTTP ' + response.status);
                }
            })
            .then(text => {
                try {
                    const json = JSON.parse(text);
                    showResult('‚úÖ manifest.json —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
                } catch (e) {
                    showResult('‚ùå manifest.json - –æ—à–∏–±–∫–∞ JSON: ' + e.message, 'error');
                }
            })
            .catch(error => {
                showResult('‚ùå manifest.json - –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
            });
    }
    
    function testFavicon() {
        fetch('./favicon.svg')
            .then(response => {
                if (response.ok) {
                    showResult('‚úÖ favicon.svg —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
                } else {
                    throw new Error('HTTP ' + response.status);
                }
            })
            .catch(error => {
                showResult('‚ùå favicon.svg - –æ—à–∏–±–∫–∞: ' + error.message, 'error');
            });
    }
    
    function testServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('./sw.js')
                .then(registration => {
                    showResult('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'success');
                })
                .catch(error => {
                    showResult('‚ùå Service Worker - –æ—à–∏–±–∫–∞: ' + error.message, 'error');
                });
        } else {
            showResult('‚ùå Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
        }
    }
    
    function testNPCGeneration() {
        const formData = new FormData();
        formData.append('race', 'human');
        formData.append('class', 'fighter');
        formData.append('level', '1');
        formData.append('alignment', 'neutral');
        formData.append('background', 'soldier');
        
        fetch('api/generate-npc-test.php', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showResult('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
            } else {
                showResult('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC - –æ—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            }
        })
        .catch(error => {
            showResult('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC - –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
        });
    }
    
    function showResult(message, type) {
        const resultsDiv = document.getElementById('testResults');
        const resultDiv = document.createElement('div');
        resultDiv.className = 'result ' + type;
        resultDiv.textContent = message;
        resultsDiv.appendChild(resultDiv);
        
        setTimeout(() => {
            if (resultDiv.parentNode) {
                resultDiv.parentNode.removeChild(resultDiv);
            }
        }, 5000);
    }
    </script>
</body>
</html>
