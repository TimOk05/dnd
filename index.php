<?php
session_start();
// --- –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ ---
$SECRET_CODE = 'dndmaster';
if (!isset($_SESSION['access_granted'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['secret_code'])) {
        if (trim($_POST['secret_code']) === $SECRET_CODE) {
            $_SESSION['access_granted'] = true;
            header('Location: index.php');
            exit;
        } else {
            $error = '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!';
        }
    }
    echo '<!DOCTYPE html><html lang="ru"><head><meta charset="UTF-8"><title>–í—Ö–æ–¥</title><style>body{background:#f8ecd0;font-family:Roboto,sans-serif;display:flex;align-items:center;justify-content:center;height:100vh;}form{background:#fffbe6;border:2px solid #a67c52;border-radius:12px;padding:32px 28px;box-shadow:0 4px 24px #0002;}input{padding:10px 18px;border-radius:8px;border:2px solid #a67c52;font-size:1.1em;}button{padding:10px 22px;border-radius:8px;border:2px solid #7c4a02;background:#a67c52;color:#fffbe6;font-size:1.1em;cursor:pointer;margin-left:8px;}button:hover{background:#7c4a02;color:#ffe0a3;}h2{margin-bottom:18px;}label{font-size:1.1em;}</style></head><body><form method="post"><h2>–í—Ö–æ–¥ –≤ DnD Copilot</h2><label>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:<br><input type="password" name="secret_code" autofocus required></label><button type="submit">–í–æ–π—Ç–∏</button>';
    if (isset($error)) echo '<div style="color:#b71c1c;margin-top:12px;">'.$error.'</div>';
    echo '</form></body></html>';
    exit;
}

if (isset($_GET['curltest'])) {
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}
if (isset($_GET['curltest2'])) {
    $apiKey = 'sk-1e898ddba737411e948af435d767e893';
    $data = [
        'model' => 'deepseek-chat',
        'messages' => [
            ['role' => 'system', 'content' => '–ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'],
            ['role' => 'user', 'content' => '–°–∫–∞–∂–∏: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.']
        ]
    ];
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . $apiKey,
        'User-Agent: DnD-PHP-Test'
    ]);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}

// --- –ó–∞–º–µ—Ç–∫–∏ ---
if (!isset($_SESSION['notes'])) {
    $_SESSION['notes'] = [];
}
if (isset($_POST['add_note']) && isset($_POST['note_content'])) {
    $_SESSION['notes'][] = trim($_POST['note_content']);
    exit('OK');
}
if (isset($_POST['remove_note'])) {
    $idx = (int)$_POST['remove_note'];
    if (isset($_SESSION['notes'][$idx])) {
        array_splice($_SESSION['notes'], $idx, 1);
    }
    exit('OK');
}

// --- –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AJAX ---
if (isset($_POST['fast_action'])) {
    $action = $_POST['fast_action'];
    // --- –ö–æ—Å—Ç–∏ ---
    if ($action === 'dice_result') {
        $dice = $_POST['dice'] ?? '1d20';
        $label = $_POST['label'] ?? '';
        if (preg_match('/^(\d{1,2})d(\d{1,3})$/', $dice, $m)) {
            $count = (int)$m[1]; $sides = (int)$m[2];
            $results = [];
            for ($i = 0; $i < $count; $i++) $results[] = rand(1, $sides);
            $sum = array_sum($results);
            $out = "–ë—Ä–æ—Å–æ–∫: $dice\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: " . implode(', ', $results) . "\n–°—É–º–º–∞: $sum";
            if ($label) $out .= "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $label";
            echo nl2br(htmlspecialchars($out));
            exit;
        } else {
            echo '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–±–æ–≤!';
            exit;
        }
    }
    echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
    exit;
}

// --- –ß–∞—Ç ---
if (!isset($_SESSION['chat'])) {
    $_SESSION['chat'] = [];
}
if (isset($_GET['reset'])) {
    $_SESSION['chat'] = [];
    header("Location: index.php");
    exit;
}

// --- –ù–æ–≤—ã–π systemInstruction —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ---
$systemInstruction = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ DnD. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –±–ª–æ–∫–æ–≤.\n–°—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É, –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n–ò–º—è: ...\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ...\n–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ...\n–°–ª–∞–±–æ—Å—Ç—å: ...\n–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: –û—Ä—É–∂–∏–µ: ... –£—Ä–æ–Ω: ... –•–∏—Ç—ã: ... –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ...\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û—Ä—É–∂–∏–µ, –£—Ä–æ–Ω, –•–∏—Ç—ã, –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –Ω–∞–ø–∏—à–∏ ‚Äò-‚Äô. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.";
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['message']) && !isset($_POST['add_note']) && !isset($_POST['remove_note'])) {
    $userMessage = trim($_POST['message']);
    if ($userMessage !== '') {
        if (empty($_SESSION['chat']) || $_SESSION['chat'][0]['role'] !== 'system') {
            array_unshift($_SESSION['chat'], ['role' => 'system', 'content' => $systemInstruction]);
        }
        $_SESSION['chat'][] = ['role' => 'user', 'content' => $userMessage];
        $apiKey = 'sk-1e898ddba737411e948af435d767e893';
        $apiUrl = 'https://api.deepseek.com/v1/chat/completions';
        $messages = array_map(function($msg) {
            return ['role' => $msg['role'], 'content' => $msg['content']];
        }, $_SESSION['chat']);
        $data = [
            'model' => 'deepseek-chat',
            'messages' => $messages
        ];
        $ch = curl_init($apiUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $apiKey
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $response = curl_exec($ch);
        curl_close($ch);
        $result = json_decode($response, true);
        $aiMessage = $result['choices'][0]['message']['content'] ?? '[–û—à–∏–±–∫–∞ AI]';
        $aiMessage = preg_replace('/[*_`>#\-]+/', '', $aiMessage);
        $aiMessage = str_replace(['"', "'", '‚Äú', '‚Äù', '¬´', '¬ª'], '', $aiMessage);
        $aiMessage = preg_replace('/\n{2,}/', "\n", $aiMessage);
        $aiMessage = preg_replace('/\s{3,}/', "\n", $aiMessage);
        $lines = explode("\n", $aiMessage);
        $formatted = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if (mb_strlen($line) > 90) {
                $formatted = array_merge($formatted, str_split($line, 80));
            } else {
                $formatted[] = $line;
            }
        }
        $aiMessage = implode("\n", $formatted);
        $_SESSION['chat'][] = ['role' => 'assistant', 'content' => $aiMessage];
    }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
$fastBtns = '';
$fastBtns .= '<button class="fast-btn" onclick="openDiceStep1()">üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π</button>';
$fastBtns .= '<button class="fast-btn" onclick="openNpcStep1()">üó£Ô∏è NPC</button>';

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º system) ---
$chatMsgs = '';
foreach ($_SESSION['chat'] as $msg) {
    if ($msg['role'] === 'system') continue;
    $who = $msg['role'] === 'user' ? '–í—ã' : 'AI';
    $class = $msg['role'];
    $chatMsgs .= '<div class="msg ' . $class . '"><b>' . $who . ':</b> ' . nl2br(htmlspecialchars($msg['content'])) . '</div>';
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∑–∞–º–µ—Ç–æ–∫ ---
$notesBlock = '';
foreach ($_SESSION['notes'] as $i => $note) {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    $plain = strip_tags(str_replace(['<br>', "\n"], "\n", $note));
    $lines = array_filter(array_map('trim', explode("\n", $plain)));
    $nameLine = '';
    foreach ($lines as $line) {
        if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/iu', $line)) {
            $nameLine = $line;
            break;
        }
    }
    $previewSrc = $nameLine ?: (count($lines) ? $lines[0] : '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ–≤—å—é –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ 3 —Å–ª–æ–≤
    $words = preg_split('/\s+/', $previewSrc);
    if (count($words) > 3) {
        $preview = implode(' ', array_slice($words, 0, 3)) . '‚Ä¶';
    } else if (mb_strlen($previewSrc) > 30) {
        $preview = mb_substr($previewSrc, 0, 30) . '‚Ä¶';
    } else {
        $preview = $previewSrc;
    }
    $notesBlock .= '<div class="note-item" onclick="expandNote(' . $i . ')">' . htmlspecialchars($preview, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '<button class="note-remove" onclick="event.stopPropagation();removeNote(' . $i . ')">√ó</button></div>';
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
$template = file_get_contents(__DIR__ . '/template.html');
$template = str_replace('{{fast_buttons}}', $fastBtns, $template);
$template = str_replace('{{chat_messages}}', $chatMsgs, $template);
$template = str_replace('{{notes_block}}', $notesBlock, $template);
echo $template;
?>
<script>
// --- Dice Modal Steps ---
function openDiceStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Å—Ç–∏:</b><div class="mini-menu-btns">' +
        ['d3','d4','d6','d8','d10','d12','d20','d100'].map(d => `<button onclick=\'openDiceStep2("${d}")\' class=\'fast-btn\'>${d}</button>`).join(' ') + '</div>'
    );
    document.getElementById('modal-save').style.display = 'none';
}
function openDiceStep2(dice) {
    showModal(`<b class="mini-menu-title">–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ ${dice}?</b><div class="npc-level-wrap"><input type=number id=dice-count value=1 min=1 max=20 style=\'width:60px\'></div><div class="npc-level-wrap"><input type=text id=dice-label placeholder=\'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\' style=\'margin-top:8px;width:90%\'></div><button class=\'fast-btn\' onclick=\'getDiceResult("${dice}")\'>–ë—Ä–æ—Å–∏—Ç—å</button>`);
    document.getElementById('modal-save').style.display = 'none';
}
function getDiceResult(dice) {
    let count = document.getElementById('dice-count').value;
    let label = document.getElementById('dice-label').value;
    let diceStr = count + dice;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=dice_result&dice=' + encodeURIComponent(diceStr) + '&label=' + encodeURIComponent(label)
    })
    .then(r => r.text())
    .then(txt => {
        document.getElementById('modal-content').innerHTML = formatResultSegments(txt, false);
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveNote(txt); closeModal(); };
    });
}
// --- NPC Modal Steps ---
const npcRaces = ['–ß–µ–ª–æ–≤–µ–∫','–≠–ª—å—Ñ','–ì–Ω–æ–º','–ü–æ–ª—É–æ—Ä–∫','–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫','–¢–∏—Ñ–ª–∏–Ω–≥','–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π','–ü–æ–ª—É—ç–ª—å—Ñ','–î–≤–æ—Ä—Ñ','–ì–æ–±–ª–∏–Ω','–û—Ä–∫','–ö–æ–±–æ–ª—å–¥','–Ø—â–µ—Ä–æ–ª—é–¥','–ì–æ–±–ª–∏–Ω','–ì–Ω–æ–º','–•–æ–±–±–∏—Ç'];
const npcClasses = ['–ë–µ–∑ –∫–ª–∞—Å—Å–∞','–í–æ–∏–Ω','–ü–∞–ª–∞–¥–∏–Ω','–ö–æ–ª–¥—É–Ω','–ú–∞–≥','–†–∞–∑–±–æ–π–Ω–∏–∫','–°–ª–µ–¥–æ–ø—ã—Ç','–ñ—Ä–µ—Ü','–ë–∞—Ä–¥','–í–∞—Ä–≤–∞—Ä','–ü–ª—É—Ç','–ú–æ–Ω–∞—Ö','–ß–∞—Ä–æ–¥–µ–π','–î—Ä—É–∏–¥'];
const npcProfs = ['–ü—Ä–æ—Ö–æ–∂–∏–π','–°—Ç—Ä–∞–∂–Ω–∏–∫','–¢–∞–≤–µ—Ä–Ω—â–∏–∫','–¢–æ—Ä–≥–æ–≤–µ—Ü','–ö—É–∑–Ω–µ—Ü','–ù–∞—ë–º–Ω–∏–∫','–ñ—Ä–µ—Ü','–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫','–†–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫','–û—Ö–æ—Ç–Ω–∏–∫','–ü–æ–≤–∞—Ä','–ü–∏—Å–∞—Ä—å','–ú–∞—Å—Ç–µ—Ä –≥–∏–ª—å–¥–∏–∏','–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫','–ú—É–¥—Ä–µ—Ü'];
let npcRace = '', npcClass = '', npcProf = '', npcLevel = 1;
function openNpcStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É NPC:</b><div class="mini-menu-btns">' + npcRaces.map(r => `<button onclick=\'openNpcStep2("${r}")\' class=\'fast-btn\'>${r}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStep2(race) {
    npcRace = race;
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å NPC:</b><div class="mini-menu-btns">' + npcClasses.map(c => `<button onclick=\'openNpcStepLevel("${c}")\' class=\'fast-btn\'>${c}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStepLevel(cls) {
    npcClass = cls;
    showModal('<b class="mini-menu-title">–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å NPC (1-20):</b><div class="npc-level-wrap"><input type=number id=npc-level value=1 min=1 max=20 style=\'width:60px\'></div><button class=\'fast-btn\' onclick=\'openNpcStep3WithLevel()\'>–î–∞–ª–µ–µ</button>');
    document.getElementById('modal-save').style.display = 'none';
}
// --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ ---
window.uniqueTraders = [];
fetch('pdf/d100_unique_traders.json')
  .then(r => r.json())
  .then(data => { window.uniqueTraders = data; });
function fetchNpcFromAI(race, npcClass, prof, level) {
    showModal('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC...');
    fetch('pdf/d100_unique_traders.json')
      .then(r => r.json())
      .then(json => {
        // 1. –ò–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let name = '';
        if (json.data && json.data.names && Array.isArray(json.data.names) && json.data.names.length > 0) {
          let filtered = race ? json.data.names.filter(n => n.race && n.race.toLowerCase().includes(race.toLowerCase())) : json.data.names;
          let pool = filtered.length ? filtered : json.data.names;
          let rnd = pool[Math.floor(Math.random() * pool.length)];
          name = rnd && rnd.name_ru ? rnd.name_ru : '';
        }
        // 2. –ß–µ—Ä—Ç—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        let trait = '';
        if (json.data && json.data.traits && Array.isArray(json.data.traits) && json.data.traits.length > 0) {
          trait = json.data.traits[Math.floor(Math.random() * json.data.traits.length)];
        }
        let motivation = '';
        if (json.data && json.data.motivation && Array.isArray(json.data.motivation) && json.data.motivation.length > 0) {
          motivation = json.data.motivation[Math.floor(Math.random() * json.data.motivation.length)];
        }
        let occ = '';
        if (json.data && json.data.occupations && Array.isArray(json.data.occupations) && json.data.occupations.length > 0) {
          occ = json.data.occupations[Math.floor(Math.random() * json.data.occupations.length)].name_ru;
        }
        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let contextBlock = '';
        if (name) contextBlock += `\n–ò–º—è: ${name} (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∏–º—è –¥–ª—è NPC)`;
        if (trait) contextBlock += `\n–ß–µ—Ä—Ç–∞: ${trait}`;
        if (motivation) contextBlock += `\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${motivation}`;
        if (occ) contextBlock += `\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${occ}`;
        contextBlock += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏–¥—É–º–∞–π —Ü–µ–ª—å–Ω–æ–≥–æ NPC.';
        const systemInstruction = '–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –±–µ–∑ markdown, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –∑–≤—ë–∑–¥–æ—á–µ–∫. –†–∞–∑–¥–µ–ª—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç NPC –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: –û–ø–∏—Å–∞–Ω–∏–µ, –í–Ω–µ—à–Ω–æ—Å—Ç—å, –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞. –í –±–ª–æ–∫–µ –ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏: –û—Ä—É–∂–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è], –£—Ä–æ–Ω: [—Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 1d6], –•–∏—Ç—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç–æ–≤], –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: [–æ—Å–Ω–æ–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å]. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!';
        const prompt = `–°–æ–∑–¥–∞–π NPC –¥–ª—è DnD. –†–∞—Å–∞: ${race}. –ö–ª–∞—Å—Å: ${npcClass}. –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${prof}. –£—Ä–æ–≤–µ–Ω—å: ${level}.${contextBlock}`;
        fetch('ai.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'prompt=' + encodeURIComponent(prompt) + '&system=' + encodeURIComponent(systemInstruction) + '&type=npc'
        })
        .then(r => r.json())
        .then(data => {
            if (data && data.result) {
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.log('AI Response:', data.result);
                document.getElementById('modal-content').innerHTML = formatNpcBlocks(data.result, name);
                document.getElementById('modal-save').style.display = '';
                document.getElementById('modal-save').onclick = function() { saveNote(document.getElementById('modal-content').innerHTML); closeModal(); };
            } else {
                document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ AI: ' + (data.error || '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞') + ']</div>';
                document.getElementById('modal-save').style.display = 'none';
            }
        })
        .catch((e) => {
            document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º]</div>';
            document.getElementById('modal-save').style.display = 'none';
        });
      });
}
function openNpcStep3WithLevel() {
    npcLevel = document.getElementById('npc-level').value;
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é NPC:</b><div class="mini-menu-btns">' + npcProfs.map(p => `<button onclick=\'fetchNpcFromAI("${npcRace}","${npcClass}","${p}","${npcLevel}")\' class=\'fast-btn\'>${p}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ NPC –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º ---
function formatNpcBlocks(txt, forcedName = '') {
    txt = txt.replace(/[\#\*`>]+/g, '');
    const blockTitles = [
        '–ò–º—è', '–†–∞—Å–∞', '–ö–ª–∞—Å—Å', '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞', '–°–ª–∞–±–æ—Å—Ç—å', '–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í–Ω–µ—à–Ω–æ—Å—Ç—å', '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è'
    ];
    let blocks = [];
    let regex = /(–ò–º—è|–†–∞—Å–∞|–ö–ª–∞—Å—Å|–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ|–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–°–ª–∞–±–æ—Å—Ç—å|–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–í–Ω–µ—à–Ω–æ—Å—Ç—å|–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è)\s*[:\- ]/gi;
    let matches = [...txt.matchAll(regex)];
    if (matches.length > 0) {
        for (let i = 0; i < matches.length; i++) {
            let start = matches[i].index + matches[i][0].length;
            let end = (i + 1 < matches.length) ? matches[i + 1].index : txt.length;
            let title = matches[i][1];
            let content = txt.slice(start, end).replace(/^\s+|\s+$/g, '');
            if (content) blocks.push({ title, content });
        }
    }
    let name = '', race = '', cls = '', shortdesc = '', trait = '', weakness = '', summary = '', desc = '', appear = '', behavior = '';
    if (blocks.length === 0) {
        let sentences = txt.split(/(?<=[.!?])\s+/);
        if (sentences.length > 0) name = sentences[0];
        if (sentences.length > 1) shortdesc = sentences[1];
        if (sentences.length > 2) trait = sentences[2];
        if (sentences.length > 3) weakness = sentences[3];
        if (sentences.length > 4) summary = sentences[4];
        if (sentences.length > 5) desc = sentences.slice(5).join(' ');
    } else {
        for (let block of blocks) {
            if (block.title === '–ò–º—è') name = block.content;
            if (block.title === '–†–∞—Å–∞') race = block.content;
            if (block.title === '–ö–ª–∞—Å—Å') cls = block.content;
            if (block.title === '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ') shortdesc = block.content;
            if (block.title === '–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞') trait = block.content;
            if (block.title === '–°–ª–∞–±–æ—Å—Ç—å') weakness = block.content;
            if (block.title === '–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞') summary = block.content;
            if (block.title === '–û–ø–∏—Å–∞–Ω–∏–µ') desc = block.content;
            if (block.title === '–í–Ω–µ—à–Ω–æ—Å—Ç—å') appear = block.content;
            if (block.title === '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è') behavior = block.content;
        }
    }
    if (!name && forcedName) name = forcedName;
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let summaryLines = [];
    let techParams = { weapon: '', damage: '', hp: '', ability: '' };
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–ª–æ–∫–µ "–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
    if (summary && summary !== '-') {
        let lines = summary.split(/\n|\r|‚Ä¢|-/).map(s => s.trim()).filter(Boolean);
        for (let line of lines) {
            if (/–æ—Ä—É–∂–∏–µ|weapon/i.test(line)) techParams.weapon = line;
            if (/—É—Ä–æ–Ω|damage/i.test(line)) techParams.damage = line;
            if (/—Ö–∏—Ç—ã|hp|–∑–¥–æ—Ä–æ–≤—å–µ|health/i.test(line)) techParams.hp = line;
            if (/—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|ability|skill/i.test(line)) techParams.ability = line;
        }
    }
    
    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–ª–æ–∫–µ, –∏—â–µ–º –≤–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–µ
    if (!techParams.weapon || !techParams.damage || !techParams.hp || !techParams.ability) {
        let allText = txt.toLowerCase();
        let lines = txt.split(/\n|\r|‚Ä¢|-/).map(s => s.trim()).filter(Boolean);
        
        for (let line of lines) {
            let lineLower = line.toLowerCase();
            if (!techParams.weapon && /–æ—Ä—É–∂–∏–µ|weapon|–º–µ—á|—Ç–æ–ø–æ—Ä|–ª—É–∫|–∫–∏–Ω–∂–∞–ª|–ø–æ—Å–æ—Ö/i.test(lineLower)) {
                techParams.weapon = line;
            }
            if (!techParams.damage && /—É—Ä–æ–Ω|damage|d\d+|1d\d+|2d\d+/i.test(lineLower)) {
                techParams.damage = line;
            }
            if (!techParams.hp && /—Ö–∏—Ç—ã|hp|–∑–¥–æ—Ä–æ–≤—å–µ|health|–∂–∏–∑–Ω/i.test(lineLower)) {
                techParams.hp = line;
            }
            if (!techParams.ability && /—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|ability|skill|–º–∞–≥–∏|–∑–∞–∫–ª–∏–Ω–∞–Ω–∏/i.test(lineLower)) {
                techParams.ability = line;
            }
        }
    }
    
    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (techParams.weapon) summaryLines.push(techParams.weapon);
    if (techParams.damage) summaryLines.push(techParams.damage);
    if (techParams.hp) summaryLines.push(techParams.hp);
    if (techParams.ability) summaryLines.push(techParams.ability);
    
    // 4. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const foundParams = [techParams.weapon, techParams.damage, techParams.hp, techParams.ability].filter(p => p).length;
    if (foundParams < 2) {
        return `<div class='npc-block-modern'><div class='npc-modern-header'>–û—à–∏–±–∫–∞</div><div class='npc-modern-block'>AI –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ù–∞–π–¥–µ–Ω–æ: ${foundParams}/4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –µ—â—ë —Ä–∞–∑.</div></div>`;
    }
    function firstSentence(str) {
        if (!str || str === '-') return '';
        let m = str.match(/^[^.?!]+[.?!]?/);
        return m ? m[0].trim() : str.trim();
    }
    let out = '';
    out += `<div class='npc-block-modern'>`;
    out += `<div class='npc-modern-header'>${name ? name : 'NPC'}</div>`;
    if (race || cls) {
        out += `<div class='npc-modern-sub'>${race ? race : ''}${race && cls ? ' ¬∑ ' : ''}${cls ? cls : ''}</div>`;
    }
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (summaryLines.length) {
        let listHtml = '<ul class="npc-modern-list">' + summaryLines.map(s => `<li>${s}</li>`).join('') + '</ul>';
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>‚öîÔ∏è</span> <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>${listHtml}</div>`;
    }
    if (shortdesc && shortdesc !== '-') {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>${firstSentence(shortdesc)}</div>`;
    }
    if (trait && trait !== '-') {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b>${firstSentence(trait)}</div>`;
    }
    if (weakness && weakness !== '-') {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>‚ö°</span> <b>–°–ª–∞–±–æ—Å—Ç—å</b>${firstSentence(weakness)}</div>`;
    }
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    if ((desc && desc !== '-') || (appear && appear !== '-') || (behavior && behavior !== '-')) {
        out += `<button class='npc-desc-toggle-btn' onclick='this.nextElementSibling.classList.toggle("active")'>–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</button>`;
        out += `<div class='npc-modern-block npc-desc-detail' style='display:none;'>`;
        if (desc && desc !== '-') out += `<div style='margin-bottom:8px;'><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${desc}</div>`;
        if (appear && appear !== '-') out += `<div style='margin-bottom:8px;'><b>–í–Ω–µ—à–Ω–æ—Å—Ç—å:</b> ${appear}</div>`;
        if (behavior && behavior !== '-') out += `<div><b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è:</b> ${behavior}</div>`;
        out += `</div>`;
    }
    out += `</div>`;
    setTimeout(() => {
      document.querySelectorAll('.npc-desc-toggle-btn').forEach(btn => {
        btn.onclick = function() {
          let block = this.nextElementSibling;
          block.style.display = block.style.display === 'block' ? 'none' : 'block';
        };
      });
    }, 100);
    return out;
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ ---
function formatResultSegments(txt, isNpc) {
    if (isNpc) {
        return formatNpcBlocks(txt);
    } else {
        // –î–ª—è –±—Ä–æ—Å–∫–æ–≤: –±—Ä–æ—Å–æ–∫+—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const lines = txt.split(/<br>|\n/).map(l => l.trim()).filter(Boolean);
        let out = '';
        if (lines.length) {
            out += `<div class="result-segment">${lines[0]}</div>`;
        }
        if (lines.length > 1) {
            out += `<div class="result-segment-alt">${lines[1]}</div>`;
        }
        if (lines.length > 2) {
            out += `<div class="result-segment">${lines.slice(2).join('<br>')}</div>`;
        }
        return out;
    }
}
// --- Modal & Notes ---
function showModal(content) {
    document.getElementById('modal-content').innerHTML = content;
    document.getElementById('modal-bg').classList.add('active');
}
function closeModal() {
    document.getElementById('modal-bg').classList.remove('active');
}
document.getElementById('modal-close').onclick = closeModal;
document.getElementById('modal-bg').onclick = function(e) { if (e.target === this) closeModal(); };
function saveNote(content) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    var content = document.getElementById('modal-content').innerHTML;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(content)
    }).then(() => location.reload());
}
function removeNote(idx) {
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'remove_note=' + encodeURIComponent(idx)
    }).then(() => location.reload());
}
function expandNote(idx) {
    if (window.allNotes && window.allNotes[idx]) {
        var content = window.allNotes[idx];
        if (content && content.trim()) {
            document.getElementById('modal-content').innerHTML = content;
            document.getElementById('modal-bg').classList.add('active');
            document.getElementById('modal-save').style.display = 'none';
        }
    }
}
// –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ JS
window.allNotes = <?php echo json_encode($_SESSION['notes'], JSON_UNESCAPED_UNICODE); ?>;
// Debug: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
if (window.allNotes) {
    window.allNotes.forEach((n, i) => {
        let plain = n.replace(/<[^>]+>/g, '\n');
        let lines = plain.split(/\n/).map(l => l.trim()).filter(Boolean);
        let nameLine = lines.find(l => /^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/i.test(l));
        let preview = nameLine || (lines.length ? lines[0] : '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
        console.log('–ó–∞–º–µ—Ç–∫–∞', i, '–ø—Ä–µ–≤—å—é:', preview);
    });
}
// --- –ß–∞—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
document.querySelector('form').onsubmit = function(e) {
    e.preventDefault();
    var msg = this.message.value.trim();
    if (!msg) return false;
    fetch('ai.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'prompt=' + encodeURIComponent(msg) + '&type=chat'
    })
    .then(r => r.json())
    .then(data => {
        if (data && data.result) {
            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            location.reload();
        } else {
            alert(data.error || '–û—à–∏–±–∫–∞ AI');
        }
    });
    return false;
};
</script>
