<?php
session_start();
// --- –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ ---
$SECRET_CODE = 'dndmaster';
if (!isset($_SESSION['access_granted'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['secret_code'])) {
        if (trim($_POST['secret_code']) === $SECRET_CODE) {
            $_SESSION['access_granted'] = true;
            header('Location: index.php');
            exit;
        } else {
            $error = '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!';
        }
    }
    echo '<!DOCTYPE html><html lang="ru"><head><meta charset="UTF-8"><title>–í—Ö–æ–¥</title><style>body{background:#f8ecd0;font-family:Roboto,sans-serif;display:flex;align-items:center;justify-content:center;height:100vh;}form{background:#fffbe6;border:2px solid #a67c52;border-radius:12px;padding:32px 28px;box-shadow:0 4px 24px #0002;}input{padding:10px 18px;border-radius:8px;border:2px solid #a67c52;font-size:1.1em;}button{padding:10px 22px;border-radius:8px;border:2px solid #7c4a02;background:#a67c52;color:#fffbe6;font-size:1.1em;cursor:pointer;margin-left:8px;}button:hover{background:#7c4a02;color:#ffe0a3;}h2{margin-bottom:18px;}label{font-size:1.1em;}</style></head><body><form method="post"><h2>–í—Ö–æ–¥ –≤ DnD Copilot</h2><label>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:<br><input type="password" name="secret_code" autofocus required></label><button type="submit">–í–æ–π—Ç–∏</button>';
    if (isset($error)) echo '<div style="color:#b71c1c;margin-top:12px;">'.$error.'</div>';
    echo '</form></body></html>';
    exit;
}

if (isset($_GET['curltest'])) {
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}
if (isset($_GET['curltest2'])) {
    $apiKey = 'sk-1e898ddba737411e948af435d767e893';
    $data = [
        'model' => 'deepseek-chat',
        'messages' => [
            ['role' => 'system', 'content' => '–ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'],
            ['role' => 'user', 'content' => '–°–∫–∞–∂–∏: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.']
        ]
    ];
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . $apiKey,
        'User-Agent: DnD-PHP-Test'
    ]);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}

// --- –ó–∞–º–µ—Ç–∫–∏ ---
if (!isset($_SESSION['notes'])) {
    $_SESSION['notes'] = [];
}
if (isset($_POST['add_note']) && isset($_POST['note_content'])) {
    $_SESSION['notes'][] = trim($_POST['note_content']);
    exit('OK');
}
if (isset($_POST['remove_note'])) {
    $idx = (int)$_POST['remove_note'];
    if (isset($_SESSION['notes'][$idx])) {
        array_splice($_SESSION['notes'], $idx, 1);
    }
    exit('OK');
}

// --- –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AJAX ---
if (isset($_POST['fast_action'])) {
    $action = $_POST['fast_action'];
    // --- –ö–æ—Å—Ç–∏ ---
    if ($action === 'dice_result') {
        $dice = $_POST['dice'] ?? '1d20';
        $label = $_POST['label'] ?? '';
        if (preg_match('/^(\d{1,2})d(\d{1,3})$/', $dice, $m)) {
            $count = (int)$m[1]; $sides = (int)$m[2];
            $results = [];
            for ($i = 0; $i < $count; $i++) $results[] = rand(1, $sides);
            $sum = array_sum($results);
            $out = "–ë—Ä–æ—Å–æ–∫: $dice\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: " . implode(', ', $results) . "\n–°—É–º–º–∞: $sum";
            if ($label) $out .= "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $label";
            echo nl2br(htmlspecialchars($out));
            exit;
        } else {
            echo '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–±–æ–≤!';
            exit;
        }
    }
    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã ---
    if ($action === 'save_note') {
        $content = $_POST['content'] ?? '';
        if ($content) {
            $_SESSION['notes'][] = $content;
            echo '–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞';
        } else {
            echo '–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ';
        }
        exit;
    }
    echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
    exit;
}

// --- –ß–∞—Ç ---
if (!isset($_SESSION['chat'])) {
    $_SESSION['chat'] = [];
}
if (isset($_GET['reset'])) {
    $_SESSION['chat'] = [];
    header("Location: index.php");
    exit;
}

// --- –ù–æ–≤—ã–π systemInstruction —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ---
$systemInstruction = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ DnD. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –±–ª–æ–∫–æ–≤.\n–°—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É, –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n–ò–º—è: ...\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ...\n–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ...\n–°–ª–∞–±–æ—Å—Ç—å: ...\n–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: –û—Ä—É–∂–∏–µ: ... –£—Ä–æ–Ω: ... –•–∏—Ç—ã: ... –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ...\n\n–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–û–ø–∏—Å–∞–Ω–∏–µ' –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–æ–≤. –ù–∞—á–∏–Ω–∞–π –±–ª–æ–∫–∏ —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –ù–ï –¥—É–±–ª–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–í–ê–ñ–ù–û: –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–≤—ã–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ D&D, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–≤–æ–π–Ω–∞—è –∞—Ç–∞–∫–∞', '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ —Ä–∞–Ω', '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å', '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä–∞', '–Ø—Ä–æ—Å—Ç—å', '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞', '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–∞–≥–∏—è', '–ë–æ–µ–≤–æ–π —Å—Ç–∏–ª—å', '–°–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π', '–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', '–°–∫—Ä—ã—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–û–±—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏', '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '–ú–∞–≥–∏—á–µ—Å–∫–æ–µ –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏–µ'. –ù–ï –ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∫—Ä–æ–º–µ '–ë–µ–∑ –∫–ª–∞—Å—Å–∞'.\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û—Ä—É–∂–∏–µ, –£—Ä–æ–Ω, –•–∏—Ç—ã, –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –Ω–∞–ø–∏—à–∏ ‚Äò-‚Äô. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.";
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['message']) && !isset($_POST['add_note']) && !isset($_POST['remove_note'])) {
    $userMessage = trim($_POST['message']);
    if ($userMessage !== '') {
        if (empty($_SESSION['chat']) || $_SESSION['chat'][0]['role'] !== 'system') {
            array_unshift($_SESSION['chat'], ['role' => 'system', 'content' => $systemInstruction]);
        }
        $_SESSION['chat'][] = ['role' => 'user', 'content' => $userMessage];
        $apiKey = 'sk-1e898ddba737411e948af435d767e893';
        $apiUrl = 'https://api.deepseek.com/v1/chat/completions';
        $messages = array_map(function($msg) {
            return ['role' => $msg['role'], 'content' => $msg['content']];
        }, $_SESSION['chat']);
        $data = [
            'model' => 'deepseek-chat',
            'messages' => $messages
        ];
        $ch = curl_init($apiUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $apiKey
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $response = curl_exec($ch);
        curl_close($ch);
        $result = json_decode($response, true);
        $aiMessage = $result['choices'][0]['message']['content'] ?? '[–û—à–∏–±–∫–∞ AI]';
        $aiMessage = preg_replace('/[*_`>#\-]+/', '', $aiMessage);
        $aiMessage = str_replace(['"', "'", '‚Äú', '‚Äù', '¬´', '¬ª'], '', $aiMessage);
        $aiMessage = preg_replace('/\n{2,}/', "\n", $aiMessage);
        $aiMessage = preg_replace('/\s{3,}/', "\n", $aiMessage);
        $lines = explode("\n", $aiMessage);
        $formatted = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if (mb_strlen($line) > 90) {
                $formatted = array_merge($formatted, str_split($line, 80));
            } else {
                $formatted[] = $line;
            }
        }
        $aiMessage = implode("\n", $formatted);
        $_SESSION['chat'][] = ['role' => 'assistant', 'content' => $aiMessage];
    }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
$fastBtns = '';
$fastBtns .= '<button class="fast-btn" onclick="openDiceStep1()">üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π</button>';
$fastBtns .= '<button class="fast-btn" onclick="openNpcStep1()">üó£Ô∏è NPC</button>';
$fastBtns .= '<button class="fast-btn" onclick="openInitiativeModal()">‚ö° –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</button>';

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º system) ---
$chatMsgs = '';
foreach ($_SESSION['chat'] as $msg) {
    if ($msg['role'] === 'system') continue;
    $who = $msg['role'] === 'user' ? '–í—ã' : 'AI';
    $class = $msg['role'];
    $chatMsgs .= '<div class="msg ' . $class . '"><b>' . $who . ':</b> ' . nl2br(htmlspecialchars($msg['content'])) . '</div>';
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∑–∞–º–µ—Ç–æ–∫ ---
$notesBlock = '';
foreach ($_SESSION['notes'] as $i => $note) {
    // –ò—â–µ–º –∏–º—è NPC –≤ –∑–∞–º–µ—Ç–∫–µ
    $plain = strip_tags(str_replace(['<br>', "\n"], "\n", $note));
    $lines = array_filter(array_map('trim', explode("\n", $plain)));
    $nameLine = '';
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ NPC
    if (preg_match('/<div class="npc-name-header">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } else {
        // –ò—â–µ–º –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ NPC
        if (preg_match('/<div class="npc-modern-header">([^<]+)<\/div>/iu', $note, $matches)) {
            $nameLine = trim($matches[1]);
        } else {
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
            foreach ($lines as $line) {
                if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/iu', $line)) {
                    $nameLine = $line;
                    break;
                }
            }
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–º—è, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if ($nameLine) {
        if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:\s*(.+)$/iu', $nameLine, $matches)) {
            $nameLine = trim($matches[2]);
        }
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏
        $nameLine = preg_replace('/^–æ–ø–∏—Å–∞–Ω–∏–µ\s+/i', '', $nameLine);
        $nameLine = preg_replace('/^\s*‚Äî\s*/', '', $nameLine);
        $nameLine = preg_replace('/^npc\s+/i', '', $nameLine);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ NPC –∑–∞–º–µ—Ç–∫–∞, –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
    if (!$nameLine) {
        foreach ($lines as $line) {
            $line = trim($line);
            if ($line && !preg_match('/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è)/iu', $line)) {
                $nameLine = $line;
                break;
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–º—è - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    if ($nameLine) {
        $words = preg_split('/\s+/', $nameLine);
        if (count($words) > 1) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–º—è
            $nameLine = $words[0];
        }
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
        $nameLine = preg_replace('/[^\w–∞-—è—ë]/ui', '', $nameLine);
        $nameLine = trim($nameLine);
    }
    
    $previewSrc = $nameLine ?: (count($lines) ? $lines[0] : '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–µ–≤—å—é
    $previewSrc = preg_replace('/^–æ–ø–∏—Å–∞–Ω–∏–µ\s+/i', '', $previewSrc);
    $previewSrc = preg_replace('/^\s*‚Äî\s*/', '', $previewSrc);
    $previewSrc = preg_replace('/^npc\s+/i', '', $previewSrc);
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è
    if ($nameLine) {
        $words = preg_split('/\s+/', $previewSrc);
        if (count($words) > 1) {
            $preview = $words[0];
        } else {
            $preview = $previewSrc;
        }
    } else {
        // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ–≤—å—é –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ 3 —Å–ª–æ–≤
        $words = preg_split('/\s+/', $previewSrc);
        if (count($words) > 3) {
            $preview = implode(' ', array_slice($words, 0, 3)) . '‚Ä¶';
        } else if (mb_strlen($previewSrc) > 30) {
            $preview = mb_substr($previewSrc, 0, 30) . '‚Ä¶';
        } else {
            $preview = $previewSrc;
        }
    }
    $notesBlock .= '<div class="note-item" onclick="expandNote(' . $i . ')">' . htmlspecialchars($preview, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '<button class="note-remove" onclick="event.stopPropagation();removeNote(' . $i . ')">√ó</button></div>';
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
$template = file_get_contents(__DIR__ . '/template.html');
$template = str_replace('{{fast_buttons}}', $fastBtns, $template);
$template = str_replace('{{chat_messages}}', $chatMsgs, $template);
$template = str_replace('{{notes_block}}', $notesBlock, $template);
echo $template;
?>
<script>
// --- Dice Modal Steps ---
function openDiceStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Å—Ç–∏:</b><div class="mini-menu-btns">' +
        ['d3','d4','d6','d8','d10','d12','d20','d100'].map(d => `<button onclick=\'openDiceStep2("${d}")\' class=\'fast-btn\'>${d}</button>`).join(' ') + '</div>'
    );
    document.getElementById('modal-save').style.display = 'none';
}
function openDiceStep2(dice) {
    showModal(`<b class="mini-menu-title">–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ ${dice}?</b><div class="npc-level-wrap"><input type=number id=dice-count value=1 min=1 max=20 style=\'width:60px\'></div><div class="npc-level-wrap"><input type=text id=dice-label placeholder=\'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\' style=\'margin-top:8px;width:90%\'></div><button class=\'fast-btn\' onclick=\'getDiceResult("${dice}")\'>–ë—Ä–æ—Å–∏—Ç—å</button>`);
    document.getElementById('modal-save').style.display = 'none';
}
function getDiceResult(dice) {
    let count = document.getElementById('dice-count').value;
    let label = document.getElementById('dice-label').value;
    let diceStr = count + dice;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=dice_result&dice=' + encodeURIComponent(diceStr) + '&label=' + encodeURIComponent(label)
    })
    .then(r => r.text())
    .then(txt => {
        document.getElementById('modal-content').innerHTML = formatResultSegments(txt, false);
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveNote(txt); closeModal(); };
    });
}
// --- NPC Modal Steps ---
const npcRaces = ['–ß–µ–ª–æ–≤–µ–∫','–≠–ª—å—Ñ','–ì–Ω–æ–º','–ü–æ–ª—É–æ—Ä–∫','–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫','–¢–∏—Ñ–ª–∏–Ω–≥','–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π','–ü–æ–ª—É—ç–ª—å—Ñ','–î–≤–æ—Ä—Ñ','–ì–æ–±–ª–∏–Ω','–û—Ä–∫','–ö–æ–±–æ–ª—å–¥','–Ø—â–µ—Ä–æ–ª—é–¥','–ì–æ–±–ª–∏–Ω','–ì–Ω–æ–º','–•–æ–±–±–∏—Ç'];
const npcClasses = ['–ë–µ–∑ –∫–ª–∞—Å—Å–∞','–í–æ–∏–Ω','–ü–∞–ª–∞–¥–∏–Ω','–ö–æ–ª–¥—É–Ω','–ú–∞–≥','–†–∞–∑–±–æ–π–Ω–∏–∫','–°–ª–µ–¥–æ–ø—ã—Ç','–ñ—Ä–µ—Ü','–ë–∞—Ä–¥','–í–∞—Ä–≤–∞—Ä','–ü–ª—É—Ç','–ú–æ–Ω–∞—Ö','–ß–∞—Ä–æ–¥–µ–π','–î—Ä—É–∏–¥'];
// –£–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π - AI —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç
let npcRace = '', npcClass = '', npcProf = '', npcLevel = 1;
let lastGeneratedParams = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function openNpcStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É NPC:</b><div class="mini-menu-btns">' + npcRaces.map(r => `<button onclick=\'openNpcStep2("${r}")\' class=\'fast-btn\'>${r}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStep2(race) {
    npcRace = race;
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å NPC:</b><div class="mini-menu-btns">' + npcClasses.map(c => `<button onclick=\'openNpcStepLevel("${c}")\' class=\'fast-btn\'>${c}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStepLevel(cls) {
    npcClass = cls;
    showModal('<b class="mini-menu-title">–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å NPC (1-20):</b><div class="npc-level-wrap"><input type=number id=npc-level value=1 min=1 max=20 style=\'width:60px\'></div><button class=\'fast-btn\' onclick=\'generateNpcWithLevel()\'>–°–æ–∑–¥–∞—Ç—å NPC</button>');
    document.getElementById('modal-save').style.display = 'none';
}
// --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ ---
window.uniqueTraders = [];
fetch('pdf/d100_unique_traders.json')
  .then(r => r.json())
  .then(data => { window.uniqueTraders = data; });
function fetchNpcFromAI(race, npcClass, prof, level) {
    showModal('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC...');
    fetch('pdf/d100_unique_traders.json')
      .then(r => r.json())
      .then(json => {
        // 1. –ò–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let name = '';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—ã
        const raceNames = {
            '—á–µ–ª–æ–≤–µ–∫': ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ï–ª–µ–Ω–∞', '–ú–∏—Ö–∞–∏–ª', '–ê–Ω–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞—Ä–∏—è', '–°–µ—Ä–≥–µ–π', '–û–ª—å–≥–∞', '–ê–Ω–¥—Ä–µ–π', '–¢–∞—Ç—å—è–Ω–∞'],
            '—ç–ª—å—Ñ': ['–õ–∏—Ä–∞–Ω', '–ê—ç–ª–∏—É—Å', '–¢–∞–ª–∞—Å', '–°–∏–ª—å–≤–∞–Ω–∞', '–≠–ª—Ä–æ–Ω–¥', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–õ–µ–≥–æ–ª–∞—Å', '–ê—Ä–≤–µ–Ω', '–¢—Ä–∞–Ω–¥—É–∏–ª', '–ö–µ–ª–µ–±—Ä–∏–∞–Ω'],
            '–≥–Ω–æ–º': ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–ë–∞–ª–∏–Ω', '–î–æ—Ä–∏–Ω', '–ù–æ—Ä–∏', '–ë–∏—Ñ—É—Ä', '–ë–æ—Ñ—É—Ä', '–ë–æ–º–±—É—Ä', '–î–≤–∞–ª–∏–Ω', '–û–∏–Ω'],
            '–ø–æ–ª—É–æ—Ä–∫': ['–ì—Ä–æ–º', '–£—Ä–≥–∞—à', '–ö—Ä–∞–≥', '–®–∞–∫–∞', '–ú–æ–≥', '–ì–∞—Ä', '–¢–æ—Ä–≥', '–ó—É–≥', '–†—É–≥', '–ë—É–≥'],
            '–ø–æ–ª—É—Ä–æ—Å–ª–∏–∫': ['–ë–∏–ª—å–±–æ', '–§—Ä–æ–¥–æ', '–°—ç–º', '–ü–∏–ø–ø–∏–Ω', '–ú–µ—Ä—Ä–∏', '–¢–æ–º', '–î–∏–∫', '–ì–∞—Ä—Ä–∏', '–†–æ—Ä–∏', '–ù–æ—Ä–∏'],
            '—Ç–∏—Ñ–ª–∏–Ω–≥': ['–ó–∞—Ä–∞', '–ú–∞–ª–∏–∫', '–ê—à', '–õ—é—Ü–∏—Ñ–µ—Ä', '–ë–µ–ª', '–ö–µ–π–Ω', '–ê–∑–∞–∑–µ–ª—å', '–ú–∞–º–º–æ–Ω', '–õ–µ–≤–∏–∞—Ñ–∞–Ω', '–ê—Å–º–æ–¥–µ–π'],
            '–¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π': ['–î—Ä–∞–∫—Å', '–†–µ–∫—Å', '–¢–æ—Ä–Ω', '–°–∫–∞–π', '–ë–ª–µ–π–∑', '–§—Ä–æ—Å—Ç', '–≠–º–±–µ—Ä', '–°—Ç–æ—Ä–º', '–§–∞–Ω–≥', '–ö–ª–æ–¥'],
            '–ø–æ–ª—É—ç–ª—å—Ñ': ['–≠–ª—Ä–æ–Ω', '–ê—Ä–∞–≥–æ—Ä–Ω', '–ê—Ä–≤–µ–Ω', '–≠–ª—Ä–æ–Ω–¥', '–ö–µ–ª–µ–±—Ä–∏–∞–Ω', '–≠–ª—Ä–æ–Ω–¥', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–õ–µ–≥–æ–ª–∞—Å', '–¢—Ä–∞–Ω–¥—É–∏–ª', '–°–∏–ª—å–≤–∞–Ω–∞'],
            '–¥–≤–æ—Ä—Ñ': ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–ë–∞–ª–∏–Ω', '–î–æ—Ä–∏–Ω', '–ù–æ—Ä–∏', '–ë–∏—Ñ—É—Ä', '–ë–æ—Ñ—É—Ä', '–ë–æ–º–±—É—Ä', '–î–≤–∞–ª–∏–Ω', '–û–∏–Ω'],
            '–≥–æ–±–ª–∏–Ω': ['–°–Ω–∏–∫', '–ì–æ–±', '–ù–∏–±', '–ó–æ–≥', '–†–∞—Ç', '–°–∫—Ä–∏—Ç', '–ì—Ä–∏–º', '–¢–≤–∏—á', '–°–∫–≤–∞–±', '–ì—Ä–∏–∑'],
            '–æ—Ä–∫': ['–ì—Ä–æ–º', '–£—Ä–≥–∞—à', '–ö—Ä–∞–≥', '–®–∞–∫–∞', '–ú–æ–≥', '–ì–∞—Ä', '–¢–æ—Ä–≥', '–ó—É–≥', '–†—É–≥', '–ë—É–≥'],
            '–∫–æ–±–æ–ª—å–¥': ['–°–Ω–∏–∫', '–ì–æ–±', '–ù–∏–±', '–ó–æ–≥', '–†–∞—Ç', '–°–∫—Ä–∏—Ç', '–ì—Ä–∏–º', '–¢–≤–∏—á', '–°–∫–≤–∞–±', '–ì—Ä–∏–∑'],
            '—è—â–µ—Ä–æ–ª—é–¥': ['–ó–∞—Ä', '–ö–µ—à', '–¢–∞–ª', '–†–µ–∫—Å', '–°–∫–∞–π', '–¢–æ—Ä–Ω', '–§–∞–Ω–≥', '–ö–ª–æ–¥', '–ë–ª–µ–π–∑', '–§—Ä–æ—Å—Ç'],
            '—Ö–æ–±–±–∏—Ç': ['–ë–∏–ª—å–±–æ', '–§—Ä–æ–¥–æ', '–°—ç–º', '–ü–∏–ø–ø–∏–Ω', '–ú–µ—Ä—Ä–∏', '–¢–æ–º', '–î–∏–∫', '–ì–∞—Ä—Ä–∏', '–†–æ—Ä–∏', '–ù–æ—Ä–∏']
        };
        
        // –í—ã–±–∏—Ä–∞–µ–º –∏–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let raceKey = race ? race.toLowerCase() : '—á–µ–ª–æ–≤–µ–∫';
        let namePool = raceNames[raceKey] || raceNames['—á–µ–ª–æ–≤–µ–∫'];
        name = namePool[Math.floor(Math.random() * namePool.length)];
        // 2. –ß–µ—Ä—Ç—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        let trait = '';
        if (json.data && json.data.traits && Array.isArray(json.data.traits) && json.data.traits.length > 0) {
          trait = json.data.traits[Math.floor(Math.random() * json.data.traits.length)];
        }
        let motivation = '';
        if (json.data && json.data.motivation && Array.isArray(json.data.motivation) && json.data.motivation.length > 0) {
          motivation = json.data.motivation[Math.floor(Math.random() * json.data.motivation.length)];
        }
        let occ = '';
        if (json.data && json.data.occupations && Array.isArray(json.data.occupations) && json.data.occupations.length > 0) {
          occ = json.data.occupations[Math.floor(Math.random() * json.data.occupations.length)].name_ru;
        }
        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let contextBlock = '';
        if (name) contextBlock += `\n–ò–º—è: ${name} (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∏–º—è –¥–ª—è NPC)`;
        if (trait) contextBlock += `\n–ß–µ—Ä—Ç–∞: ${trait}`;
        if (motivation) contextBlock += `\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${motivation}`;
        if (occ) contextBlock += `\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${occ}`;
        contextBlock += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏–¥—É–º–∞–π —Ü–µ–ª—å–Ω–æ–≥–æ NPC.';
        const systemInstruction = '–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ NPC –¥–ª—è D&D. –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è\n[—Ç–æ–ª—å–∫–æ –∏–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–¢–æ—Ä–∏–Ω –ö–∞–º–µ–Ω—â–∏–∫"]\n\n–û–ø–∏—Å–∞–Ω–∏–µ\n[3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø—Ä–æ—à–ª–æ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Ü–µ–ª—è—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω–∏]\n\n–í–Ω–µ—à–Ω–æ—Å—Ç—å\n[2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤–Ω–µ—à–Ω–µ–º –≤–∏–¥–µ, –æ–¥–µ–∂–¥–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö]\n\n–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n[1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø–æ–≤–µ–¥–µ–Ω–∏–∏, –ø—Ä–∏–≤—ã—á–∫–∞—Ö]\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–û—Ä—É–∂–∏–µ: [–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞]\n–£—Ä–æ–Ω: [—Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 1d6 —Ä—É–±—è—â–∏–π]\n–•–∏—Ç—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç–æ–≤]\n\n–í–ê–ñ–ù–û: –ò–º—è —É–∫–∞–∑—ã–≤–∞–π –¢–û–õ–¨–ö–û –≤ –±–ª–æ–∫–µ "–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è". –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –≤ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–∞—Ö.';
        const prompt = `–°–æ–∑–¥–∞–π NPC –¥–ª—è DnD. –†–∞—Å–∞: ${race}. –ö–ª–∞—Å—Å: ${npcClass}. –£—Ä–æ–≤–µ–Ω—å: ${level}. –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.${contextBlock}`;
        fetch('ai.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'prompt=' + encodeURIComponent(prompt) + '&system=' + encodeURIComponent(systemInstruction) + '&type=npc'
        })
        .then(r => r.json())
        .then(data => {
            if (data && data.result) {
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.log('AI Response:', data.result);
                document.getElementById('modal-content').innerHTML = formatNpcBlocks(data.result, name);
                document.getElementById('modal-save').style.display = '';
                document.getElementById('modal-save').onclick = function() { saveNote(document.getElementById('modal-content').innerHTML); closeModal(); };
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                let oldRegenerateBtn = document.querySelector('.modal-regenerate');
                if (oldRegenerateBtn) {
                    oldRegenerateBtn.remove();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                let regenerateBtn = document.createElement('button');
                regenerateBtn.className = 'modal-regenerate';
                regenerateBtn.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é';
                regenerateBtn.onclick = regenerateNpc;
                document.getElementById('modal').appendChild(regenerateBtn);
            } else {
                document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ AI: ' + (data.error || '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞') + ']</div>';
                document.getElementById('modal-save').style.display = 'none';
            }
        })
        .catch((e) => {
            document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º]</div>';
            document.getElementById('modal-save').style.display = 'none';
        });
      });
}
function generateNpcWithLevel() {
    npcLevel = document.getElementById('npc-level').value;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    lastGeneratedParams = {
        race: npcRace,
        class: npcClass,
        level: npcLevel
    };
    // AI —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    fetchNpcFromAI(npcRace, npcClass, '', npcLevel);
}

function regenerateNpc() {
    if (lastGeneratedParams.race && lastGeneratedParams.class && lastGeneratedParams.level) {
        fetchNpcFromAI(lastGeneratedParams.race, lastGeneratedParams.class, '', lastGeneratedParams.level);
    } else {
        alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
}

// --- –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ ---
let initiativeList = [];
let currentInitiativeIndex = 0;
let currentRound = 1;

function openInitiativeModal() {
    showModal('<div class="initiative-container">' +
        '<div class="initiative-header">' +
            '<h3>‚ö° –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</h3>' +
            '<div class="initiative-stats">' +
                '<span class="stat-item">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <strong id="initiative-count">0</strong></span>' +
                '<span class="stat-item">–†–∞—É–Ω–¥: <strong id="initiative-round">1</strong></span>' +
            '</div>' +
        '</div>' +
        '<div class="initiative-current-turn" id="initiative-current-turn"></div>' +
        '<div class="initiative-list" id="initiative-list"></div>' +
        '<div class="initiative-controls">' +
            '<div class="control-group">' +
                '<button class="initiative-btn player-btn" onclick="addInitiativeEntry(\'player\')">üë§ –ò–≥—Ä–æ–∫</button>' +
                '<button class="initiative-btn enemy-btn" onclick="addInitiativeEntry(\'enemy\')">üëπ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫</button>' +
                '<button class="initiative-btn other-btn" onclick="addInitiativeEntry(\'other\')">‚ö° –ï—â—ë</button>' +
            '</div>' +
            '<div class="control-group">' +
                '<button class="initiative-btn round-btn" onclick="nextRound()">üîÑ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>' +
                '<button class="initiative-btn clear-btn" onclick="clearInitiative()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>' +
            '</div>' +
        '</div>' +
    '</div>');
    document.getElementById('modal-save').style.display = '';
    document.getElementById('modal-save').onclick = function() { saveInitiativeNote(); closeModal(); };
    updateInitiativeDisplay();
}

function addInitiativeEntry(type) {
    let title = type === 'player' ? '–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞' : 
                type === 'enemy' ? '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' : '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    let diceButton = type === 'enemy' || type === 'other' ? 
        '<button class="dice-btn" onclick="rollInitiativeDice()">üé≤ d20</button>' : '';
    
    showModal('<div class="initiative-entry">' +
        '<div class="entry-title">' + title + '</div>' +
        '<input type="text" id="initiative-name" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)" maxlength="30" class="initiative-input">' +
        '<input type="number" id="initiative-value" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã" class="initiative-input">' +
        diceButton +
        '<div class="entry-buttons">' +
            '<button class="save-btn" onclick="saveInitiativeEntry(\'' + type + '\')">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>' +
            '<button class="cancel-btn" onclick="openInitiativeModal()">–û—Ç–º–µ–Ω–∞</button>' +
        '</div>' +
    '</div>');
    document.getElementById('modal-save').style.display = 'none';
}

function rollInitiativeDice() {
    let result = Math.floor(Math.random() * 20) + 1;
    document.getElementById('initiative-value').value = result;
}

function saveInitiativeEntry(type) {
    let name = document.getElementById('initiative-name').value.trim();
    let value = parseInt(document.getElementById('initiative-value').value);
    
    if (!name || isNaN(value)) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (!/^[–∞-—è—ë0-9\s]+$/i.test(name)) {
        alert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã!');
        return;
    }
    
    let entry = {
        id: Date.now(),
        name: name,
        value: value,
        type: type
    };
    
    initiativeList.push(entry);
    sortInitiativeList();
    openInitiativeModal();
}

function sortInitiativeList() {
    initiativeList.sort((a, b) => {
        if (b.value !== a.value) {
            return b.value - a.value; // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
        }
        return a.id - b.id; // –ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö - –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    });
}

function updateInitiativeDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ä–∞—É–Ω–¥
    document.getElementById('initiative-count').textContent = initiativeList.length;
    document.getElementById('initiative-round').textContent = currentRound;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if (initiativeList.length > 0) {
        let current = initiativeList[currentInitiativeIndex];
        let typeIcon = current.type === 'player' ? 'üë§' : 
                      current.type === 'enemy' ? 'üëπ' : '‚ö°';
        
        document.getElementById('initiative-current-turn').innerHTML = 
            '<div class="current-turn-display">' +
                '<div class="current-turn-icon">' + typeIcon + '</div>' +
                '<div class="current-turn-info">' +
                    '<div class="current-turn-name">' + current.name + '</div>' +
                    '<div class="current-turn-value">–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: ' + current.value + '</div>' +
                '</div>' +
                '<div class="current-turn-actions">' +
                    '<button class="turn-btn prev-btn" onclick="prevInitiative()">‚óÄ</button>' +
                    '<button class="turn-btn next-btn" onclick="nextInitiative()">‚ñ∂</button>' +
                '</div>' +
            '</div>';
    } else {
        document.getElementById('initiative-current-turn').innerHTML = 
            '<div class="no-initiative">–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è</div>';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    let listHtml = '';
    initiativeList.forEach((entry, index) => {
        let isActive = index === currentInitiativeIndex;
        let typeClass = entry.type === 'player' ? 'player-entry' : 
                       entry.type === 'enemy' ? 'enemy-entry' : 'other-entry';
        let activeClass = isActive ? ' active' : '';
        let typeIcon = entry.type === 'player' ? 'üë§' : 
                      entry.type === 'enemy' ? 'üëπ' : '‚ö°';
        
        listHtml += '<div class="initiative-item ' + typeClass + activeClass + '" onclick="setActiveInitiative(' + index + ')">' +
            '<div class="initiative-item-content">' +
                '<div class="initiative-icon">' + typeIcon + '</div>' +
                '<div class="initiative-info">' +
                    '<div class="initiative-name">' + entry.name + '</div>' +
                    '<div class="initiative-value">' + entry.value + '</div>' +
                '</div>' +
            '</div>' +
            '<div class="initiative-actions">' +
                '<button class="edit-btn" onclick="event.stopPropagation(); editInitiativeEntry(' + entry.id + ')">‚úèÔ∏è</button>' +
                '<button class="delete-btn" onclick="event.stopPropagation(); deleteInitiativeEntry(' + entry.id + ')">üóëÔ∏è</button>' +
            '</div>' +
        '</div>';
    });
    
    document.getElementById('initiative-list').innerHTML = listHtml;
}

function setActiveInitiative(index) {
    currentInitiativeIndex = index;
    updateInitiativeDisplay();
}

function prevInitiative() {
    if (initiativeList.length > 0) {
        currentInitiativeIndex = (currentInitiativeIndex - 1 + initiativeList.length) % initiativeList.length;
        updateInitiativeDisplay();
    }
}

function nextInitiative() {
    if (initiativeList.length > 0) {
        currentInitiativeIndex = (currentInitiativeIndex + 1) % initiativeList.length;
        updateInitiativeDisplay();
    }
}

function clearInitiative() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã?')) {
        initiativeList = [];
        currentInitiativeIndex = 0;
        currentRound = 1;
        updateInitiativeDisplay();
    }
}

function nextRound() {
    currentRound++;
    currentInitiativeIndex = 0;
    updateInitiativeDisplay();
}

function editInitiativeEntry(id) {
    let entry = initiativeList.find(e => e.id === id);
    if (!entry) return;
    
    let title = entry.type === 'player' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞' : 
                entry.type === 'enemy' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    
    showModal('<div class="initiative-entry">' +
        '<div class="entry-title">' + title + '</div>' +
        '<input type="text" id="initiative-name" value="' + entry.name + '" maxlength="30" class="initiative-input">' +
        '<input type="number" id="initiative-value" value="' + entry.value + '" class="initiative-input">' +
        '<div class="entry-buttons">' +
            '<button class="save-btn" onclick="updateInitiativeEntry(' + entry.id + ')">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>' +
            '<button class="cancel-btn" onclick="openInitiativeModal()">–û—Ç–º–µ–Ω–∞</button>' +
        '</div>' +
    '</div>');
    document.getElementById('modal-save').style.display = 'none';
}

function updateInitiativeEntry(id) {
    let name = document.getElementById('initiative-name').value.trim();
    let value = parseInt(document.getElementById('initiative-value').value);
    
    if (!name || isNaN(value)) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
    }
    
    if (!/^[–∞-—è—ë0-9\s]+$/i.test(name)) {
        alert('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã!');
        return;
    }
    
    let entry = initiativeList.find(e => e.id === id);
    if (entry) {
        entry.name = name;
        entry.value = value;
        sortInitiativeList();
        openInitiativeModal();
    }
}

function deleteInitiativeEntry(id) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?')) {
        initiativeList = initiativeList.filter(e => e.id !== id);
        if (currentInitiativeIndex >= initiativeList.length) {
            currentInitiativeIndex = Math.max(0, initiativeList.length - 1);
        }
        updateInitiativeDisplay();
    }
}

function saveInitiativeNote() {
    if (initiativeList.length === 0) {
        alert('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        return;
    }
    
    let noteContent = '<div class="initiative-note">' +
        '<div class="initiative-note-title">–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞</div>';
    
    initiativeList.forEach((entry, index) => {
        let typeClass = entry.type === 'player' ? 'player-entry' : 
                       entry.type === 'enemy' ? 'enemy-entry' : 'other-entry';
        let isActive = index === currentInitiativeIndex ? ' active' : '';
        
        noteContent += '<div class="initiative-item ' + typeClass + isActive + '">' +
            '<div class="initiative-name">' + entry.name + '</div>' +
            '<div class="initiative-value">' + entry.value + '</div>' +
        '</div>';
    });
    
    noteContent += '</div>';
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=save_note&content=' + encodeURIComponent(noteContent)
    })
    .then(r => r.text())
    .then(() => {
        alert('–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∑–∞–º–µ—Ç–∫–∏!');
        closeModal();
    });
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ NPC –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º ---
function formatNpcBlocks(txt, forcedName = '') {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    txt = txt.replace(/[\#\*`>\[\]]+/g, '');
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    const blockTitles = [
        '–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í–Ω–µ—à–Ω–æ—Å—Ç—å', '–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
    ];
    
    let blocks = [];
    let regex = /(–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è|–û–ø–∏—Å–∞–Ω–∏–µ|–í–Ω–µ—à–Ω–æ—Å—Ç—å|–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)\s*[:\- ]/gi;
    let matches = [...txt.matchAll(regex)];
    
    if (matches.length > 0) {
        for (let i = 0; i < matches.length; i++) {
            let start = matches[i].index + matches[i][0].length;
            let end = (i + 1 < matches.length) ? matches[i + 1].index : txt.length;
            let title = matches[i][1];
            let content = txt.slice(start, end).replace(/^\s+|\s+$/g, '');
            if (content && content.length > 5) {
                blocks.push({ title, content });
            }
        }
    }
    let name = '', desc = '', appear = '', trait = '', techBlock = '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤
    for (let block of blocks) {
        if (block.title === '–ò–º—è –∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è') name = block.content;
        if (block.title === '–û–ø–∏—Å–∞–Ω–∏–µ') desc = block.content;
        if (block.title === '–í–Ω–µ—à–Ω–æ—Å—Ç—å') appear = block.content;
        if (block.title === '–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞') trait = block.content;
        if (block.title === '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã') techBlock = block.content;
    }
    
    // –ï—Å–ª–∏ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (!name || !desc || !appear || !trait) {
        let lines = txt.split(/\n/).map(s => s.trim()).filter(Boolean);
        
            // –ò—â–µ–º –∏–º—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if (!name && lines.length > 0) {
        let firstLine = lines[0];
        if (firstLine.length < 50 && !firstLine.includes(':')) {
            name = firstLine;
        }
    }
    
    // –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –µ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (—á–∞—Å—Ç–æ AI –ø–æ–º–µ—â–∞–µ—Ç –∏–º—è —Ç—É–¥–∞)
    if (!name && desc) {
        let nameMatch = desc.match(/^([–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)*)(?:\s*[,\-]\s*[–∞-—è—ë\s]+)?/);
        if (nameMatch && nameMatch[1]) {
            name = nameMatch[1];
            // –£–±–∏—Ä–∞–µ–º –∏–º—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            desc = desc.replace(nameMatch[0], '').trim();
            desc = desc.replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
    }
        
        // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏)
        if (!desc && lines.length > 1) {
            for (let i = 1; i < Math.min(5, lines.length); i++) {
                let line = lines[i];
                if (line.length > 20 && line.length < 200 && 
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    desc = line;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å (–æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞)
        if (!appear) {
            for (let line of lines) {
                if (line.length > 15 && line.length < 150 &&
                    /–≤—ã—Å–æ–∫–∏–π|–Ω–∏–∑–∫–∏–π|—Å—Ç—Ä–æ–π–Ω—ã–π|–ø–æ–ª–Ω—ã–π|–≤–æ–ª–æ—Å—ã|–≥–ª–∞–∑–∞|–ª–∏—Ü–æ|–æ–¥–µ–∂–¥–∞|–¥–ª–∏–Ω–Ω—ã–µ|–∫–æ—Ä–æ—Ç–∫–∏–µ|—Å–≤–µ—Ç–ª—ã–µ|—Ç–µ–º–Ω—ã–µ|–∫—Ä–µ–ø–∫–∏–π|–º—É–∂—á–∏–Ω–∞|–ø–ª–µ—á–∏|—Ä—É–∫–∏|—à—Ä–∞–º—ã|—Ñ–∞—Ä—Ç—É–∫|—Ö–≤–æ—Å—Ç|—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–µ|–∑–∞–ø–ª–µ—Ç—ë–Ω–Ω—ã–µ|–∫–æ—Å—ã|—è—Ä–∫–æ-–≥–æ–ª—É–±—ã–µ|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—Å—Ç—Ä–æ–π–Ω–∞—è|–∂–µ–Ω—â–∏–Ω–∞|—Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏|—Ç—ë–º–Ω—ã–º–∏|–ø—É—á–æ–∫|—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º|–ø–ª–∞—Ç—å–µ|—Ñ–æ—Ä–º–∞—Ä–∏—è|–≥–ª–∞–∑–∞|—Å–ª–µ–¥—è—Ç|–¥–≤–∏–∂–µ–Ω–∏—è|—Ç–æ—á–Ω—ã|—ç–∫–æ–Ω–æ–º–Ω—ã|–º—É—Å–∫—É–ª–∏—Å—Ç—ã–º|—Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ–º|–ø–æ–∫—Ä—ã—Ç—ã–º|—Å—Ç–∞—Ä—ã–º–∏|—à—Ä–∞–º–∞–º–∏|–¥–æ—Å–ø–µ—Ö–æ–≤|–±—Ä–æ–Ω–∏|–∑–µ–ª—ë–Ω—ã–µ|–º–æ—Ä—Å–∫–æ–π|–≤–æ–ª–Ω—ã|—Ö–æ–ª–æ–¥–Ω—ã–º–∏|–æ—Å—Ç—Ä—ã–º–∏|—á–µ—Ä—Ç–∞–º–∏|—É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–º–∏|—ç–ª—å—Ñ–∏–π—Å–∫–æ–π|–∫—Ä–æ–≤–∏|–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π|—Å–∏–ª–æ–π/i.test(line.toLowerCase()) &&
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    appear = line;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        if (!trait) {
            for (let line of lines) {
                if (line.length > 10 && line.length < 100 &&
                    /—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|—Ö–∏—Ç—Ä—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π|–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π|—Ü–∏–Ω–∏—á–Ω—ã–π|–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π|–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–Ω–∞–∏–≤–Ω—ã–π|–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π|–º—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π|—Å–ø–æ–∫–æ–π–Ω—ã–π|–≤—Å–ø—ã–ª—å—á–∏–≤—ã–π|–¥–æ–±—Ä—ã–π|–∑–ª–æ–π|–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/i.test(line.toLowerCase()) &&
                    !line.includes('–û—Ä—É–∂–∏–µ:') && !line.includes('–£—Ä–æ–Ω:') && !line.includes('–•–∏—Ç—ã:')) {
                    trait = line;
                    break;
                }
            }
        }
    }
    
    // –ï—Å–ª–∏ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è
    if (!name && forcedName) name = forcedName;
    
    // –û—á–∏—â–∞–µ–º –±–ª–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (name) name = name.replace(/[\[\]()]/g, '').trim();
    if (desc) desc = desc.replace(/[\[\]()]/g, '').trim();
    if (appear) appear = appear.replace(/[\[\]()]/g, '').trim();
    if (trait) trait = trait.replace(/[\[\]()]/g, '').trim();
    if (techBlock) techBlock = techBlock.replace(/[\[\]()]/g, '').trim();
    
    // –£–±–∏—Ä–∞–µ–º –∏–º—è –∏–∑ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
    if (name) {
        let cleanName = name.split(/\s+/)[0].replace(/[^\w–∞-—è—ë]/gi, '').trim();
        const nameRegex = new RegExp(cleanName + '\\s*', 'gi');
        
        if (trait && trait.includes(cleanName)) {
            trait = trait.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
        if (desc && desc.includes(cleanName)) {
            desc = desc.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
        if (appear && appear.includes(cleanName)) {
            appear = appear.replace(nameRegex, '').trim().replace(/^[,\s]+/, '').replace(/[,\s]+$/, '');
        }
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–º—è
    if (trait && trait.includes('–ò–º—è:')) {
        trait = trait.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    if (desc && desc.includes('–ò–º—è:')) {
        desc = desc.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    if (appear && appear.includes('–ò–º—è:')) {
        appear = appear.replace(/.*?–ò–º—è:\s*[^.]*\.?/i, '').trim();
    }
    
    // –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (desc && /—á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–≥—Ä—É–±–æ–≤–∞—Ç—ã–º|—é–º–æ—Ä|—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|–¥–∏–∫–∞—è|–Ω–µ–æ–±—É–∑–¥–∞–Ω–Ω–∞—è|–Ω–∞—Ç—É—Ä–∞|–±—Ä–∞–ª–∞ –≤–µ—Ä—Ö|–¥—É—Ö–æ–≤–Ω–æ–µ|–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ|–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏|–ø–æ–∫–∏–Ω—É–ª–∞|—Ö—Ä–∞–º|–Ω–∞–π—Ç–∏ –ø—É—Ç—å|—Å–æ—á–µ—Ç–∞—è|—è—Ä–æ—Å—Ç—å|–≤–∞—Ä–≤–∞—Ä–∞|–≥–ª—É–±–æ–∫—É—é —Å–≤—è–∑—å|–ø—Ä–∏—Ä–æ–¥–æ–π|–¥–∏–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è|–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞|–∑–∞—â–∏—Ç—É|—Å–≤—è—â–µ–Ω–Ω—ã—Ö|–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ|–±–∞–ª–∞–Ω—Å–∞|–ø–ª–µ–º–µ–Ω–µ–º|–ª–µ—Å–æ–º/i.test(desc.toLowerCase())) {
        if (!trait || trait === '-') {
            trait = desc;
            desc = '';
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            trait = trait + '. ' + desc;
            desc = '';
        }
    }
    if (!name && forcedName) name = forcedName;
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let summaryLines = [];
    let techParams = { weapon: '', damage: '', hp: '' };
    
    // –ò—â–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–ª–æ–∫–µ
    if (techBlock) {
        let lines = techBlock.split(/\n|\r/).map(s => s.trim()).filter(Boolean);
        for (let line of lines) {
            if (/–æ—Ä—É–∂–∏–µ\s*:/i.test(line)) techParams.weapon = line;
            if (/—É—Ä–æ–Ω\s*:/i.test(line)) techParams.damage = line;
            if (/—Ö–∏—Ç—ã\s*:/i.test(line)) techParams.hp = line;
        }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–ª–æ–∫–æ–≤
    if (!name) {
        return `<div class='npc-block-modern'><div class='npc-modern-header'>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</div><div class='npc-modern-block'>AI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –µ—â—ë —Ä–∞–∑.</div></div>`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞
    if (!techBlock || techBlock.length < 10) {
        let weapon, damage, hp;
        
        // –ü–æ–¥–±–∏—Ä–∞–µ–º –æ—Ä—É–∂–∏–µ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
        switch(npcClass.toLowerCase()) {
            case '–≤–æ–∏–Ω':
            case '–≤–∞—Ä–≤–∞—Ä':
            case '–ø–∞–ª–∞–¥–∏–Ω':
                weapon = '–ú–µ—á';
                damage = '1d8 —Ä—É–±—è—â–∏–π';
                hp = '15';
                break;
            case '–º–∞–≥':
            case '–≤–æ–ª—à–µ–±–Ω–∏–∫':
                weapon = '–ü–æ—Å–æ—Ö';
                damage = '1d6 –¥—Ä–æ–±—è—â–∏–π';
                hp = '8';
                break;
            case '–ª—É—á–Ω–∏–∫':
            case '—Å–ª–µ–¥–æ–ø—ã—Ç':
                weapon = '–õ—É–∫';
                damage = '1d8 –∫–æ–ª—é—â–∏–π';
                hp = '12';
                break;
            case '–∂—Ä–µ—Ü':
            case '–¥—Ä—É–∏–¥':
                weapon = '–ë—É–ª–∞–≤–∞';
                damage = '1d6 –¥—Ä–æ–±—è—â–∏–π';
                hp = '10';
                break;
            case '–ø–ª—É—Ç':
            case '–±–∞—Ä–¥':
                weapon = '–ö–∏–Ω–∂–∞–ª';
                damage = '1d4 –∫–æ–ª—é—â–∏–π';
                hp = '8';
                break;
            default:
                weapon = '–ö—É–ª–∞–∫–∏';
                damage = '1d4 –¥—Ä–æ–±—è—â–∏–π';
                hp = '10';
        }
        
        techBlock = `–û—Ä—É–∂–∏–µ: ${weapon}\n–£—Ä–æ–Ω: ${damage}\n–•–∏—Ç—ã: ${hp}`;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (techParams.weapon) summaryLines.push(techParams.weapon);
    if (techParams.damage) summaryLines.push(techParams.damage);
    if (techParams.hp) summaryLines.push(techParams.hp);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const foundParams = [techParams.weapon, techParams.damage, techParams.hp].filter(p => p).length;
    if (foundParams < 2) {
        // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        if (!techParams.weapon) techParams.weapon = '–û—Ä—É–∂–∏–µ: –ö—É–ª–∞–∫–∏';
        if (!techParams.damage) techParams.damage = '–£—Ä–æ–Ω: 1d4 –¥—Ä–æ–±—è—â–∏–π';
        if (!techParams.hp) techParams.hp = '–•–∏—Ç—ã: 10';
        summaryLines = [techParams.weapon, techParams.damage, techParams.hp];
    }
    
    function firstSentence(str) {
        if (!str || str === '-') return '';
        let m = str.match(/^[^.?!]+[.?!]?/);
        return m ? m[0].trim() : str.trim();
    }
    
    let out = '';
    out += `<div class='npc-block-modern'>`;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
    let cleanName = name;
    if (name.includes(',')) {
        cleanName = name.split(',')[0].trim();
    } else if (name.includes('-')) {
        cleanName = name.split('-')[0].trim();
    }
    cleanName = cleanName.split(/\s+/)[0].replace(/[^\w–∞-—è—ë]/gi, '').trim();
    out += `<div class='npc-modern-header'>${cleanName || 'NPC'}</div>`;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (summaryLines.length) {
        let listHtml = '<ul class="npc-modern-list">' + summaryLines.map(s => `<li>${s}</li>`).join('') + '</ul>';
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>‚öîÔ∏è</span> <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>${listHtml}</div>`;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ fallback –∑–Ω–∞—á–µ–Ω–∏—è
    const fallbackDescriptions = [
        '–ë—ã–≤–∞–ª—ã–π –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π.',
        '–ú–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –≤—Å–µ —Ç–∞–π–Ω—ã –∏ —Å–ª—É—Ö–∏ —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.',
        '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü, —á—å–µ –ø—Ä–æ—à–ª–æ–µ –æ–∫—É—Ç–∞–Ω–æ —Ç–∞–π–Ω–æ–π.',
        '–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞, –ø–æ–ª—å–∑—É—é—â–∏–π—Å—è —É–≤–∞–∂–µ–Ω–∏–µ–º —Å—Ä–µ–¥–∏ –º–µ—Å—Ç–Ω—ã—Ö.',
        '–ú–æ–ª–æ–¥–æ–π –∏—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –∂–∞–∂–¥—É—â–∏–π —Å–ª–∞–≤—ã –∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞.'
    ];
    
    const fallbackTraits = [
        '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏.',
        '–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∏ —Ä–∞—Å—á–µ—Ç–ª–∏–≤—ã–π, –Ω–µ –¥–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º.',
        '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏.',
        '–ì–æ—Ä–¥—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π, —Ü–µ–Ω–∏—Ç —Å–≤–æ—é —Å–≤–æ–±–æ–¥—É –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ.',
        '–ú—É–¥—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–¥—É–º–∞–Ω–Ω–æ.'
    ];
    
    const fallbackAppearances = [
        '–°—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞ —Å –∫—Ä–µ–ø–∫–∏–º —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–æ—Ö–æ–¥–∫–æ–π.',
        '–í—ã—Å–æ–∫–∏–π –∏ —Å—Ç—Ä–æ–π–Ω—ã–π, —Å –æ—Å—Ç—Ä—ã–º–∏ —á–µ—Ä—Ç–∞–º–∏ –ª–∏—Ü–∞ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –≤–∑–≥–ª—è–¥–æ–º.',
        '–ö–æ—Ä–µ–Ω–∞—Å—Ç—ã–π –∏ —Å–∏–ª—å–Ω—ã–π, —Å —à–∏—Ä–æ–∫–∏–º–∏ –ø–ª–µ—á–∞–º–∏ –∏ –≥—Ä—É–±—ã–º–∏ —Ä—É–∫–∞–º–∏.',
        '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏ —É—Ö–æ–∂–µ–Ω–Ω—ã–π, —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –æ–¥–µ–∂–¥–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º–∏ –º–∞–Ω–µ—Ä–∞–º–∏.',
        '–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–µ–ø—Ä–∏–º–µ—Ç–Ω—ã–π, –ª–µ–≥–∫–æ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è –≤ —Ç–æ–ª–ø–µ.'
    ];
    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (desc && desc.length > 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b><div class='npc-content'>${firstSentence(desc)}</div></div>`;
    } else if (!desc || desc.length <= 10) {
        let randomDesc = fallbackDescriptions[Math.floor(Math.random() * fallbackDescriptions.length)];
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b><div class='npc-content'>${randomDesc}</div></div>`;
    }
    
    // –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    if (trait && trait.length > 5) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b><div class='npc-content'>${firstSentence(trait)}</div></div>`;
    } else if (!trait || trait.length <= 5) {
        let randomTrait = fallbackTraits[Math.floor(Math.random() * fallbackTraits.length)];
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b><div class='npc-content'>${randomTrait}</div></div>`;
    }
    
    // –í–Ω–µ—à–Ω–æ—Å—Ç—å
    if (appear && appear.length > 10) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üë§</span> <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å</b><div class='npc-content'>${firstSentence(appear)}</div></div>`;
    } else if (!appear || appear.length <= 10) {
        let randomAppear = fallbackAppearances[Math.floor(Math.random() * fallbackAppearances.length)];
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üë§</span> <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å</b><div class='npc-content'>${randomAppear}</div></div>`;
    }
    out += `</div>`;
    setTimeout(() => {
      document.querySelectorAll('.npc-desc-toggle-btn').forEach(btn => {
        btn.onclick = function() {
          let block = this.nextElementSibling;
          block.style.display = block.style.display === 'block' ? 'none' : 'block';
        };
      });
    }, 100);
    return out;
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ ---
function formatResultSegments(txt, isNpc) {
    if (isNpc) {
        return formatNpcBlocks(txt);
    } else {
        // –î–ª—è –±—Ä–æ—Å–∫–æ–≤: –±—Ä–æ—Å–æ–∫+—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const lines = txt.split(/<br>|\n/).map(l => l.trim()).filter(Boolean);
        let out = '';
        if (lines.length) {
            out += `<div class="result-segment">${lines[0]}</div>`;
        }
        if (lines.length > 1) {
            out += `<div class="result-segment-alt">${lines[1]}</div>`;
        }
        if (lines.length > 2) {
            out += `<div class="result-segment">${lines.slice(2).join('<br>')}</div>`;
        }
        return out;
    }
}
// --- Modal & Notes ---
function showModal(content) {
    document.getElementById('modal-content').innerHTML = content;
    document.getElementById('modal-bg').classList.add('active');
}
function closeModal() {
    document.getElementById('modal-bg').classList.remove('active');
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    let regenerateBtn = document.querySelector('.modal-regenerate');
    if (regenerateBtn) {
        regenerateBtn.remove();
    }
}
document.getElementById('modal-close').onclick = closeModal;
document.getElementById('modal-bg').onclick = function(e) { if (e.target === this) closeModal(); };
function saveNote(content) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    var content = document.getElementById('modal-content').innerHTML;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è NPC –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    var headerElement = document.querySelector('.npc-modern-header');
    var npcName = headerElement ? headerElement.textContent.trim() : 'NPC';
    
    // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ "NPC", –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    if (!npcName || npcName === 'NPC') {
        // –ò—â–µ–º –∏–º—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        var plainText = content.replace(/<[^>]+>/g, '\n');
        var lines = plainText.split(/\n/).map(l => l.trim()).filter(Boolean);
        
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            if (line && line.length > 2 && line.length < 30 && 
                !/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ)/i.test(line) &&
                !line.includes(':') && !line.includes('‚Äî')) {
                npcName = line;
                break;
            }
        }
    }
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)
    if (npcName && npcName !== 'NPC') {
        var words = npcName.split(/\s+/);
        if (words.length > 1) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–º—è
            npcName = words[0];
        }
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        npcName = npcName.replace(/[^\w–∞-—è—ë]/gi, '').trim();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    var noteWithName = '<div class="npc-name-header">' + npcName + '</div>' + content;
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(noteWithName)
    }).then(() => location.reload());
}
function removeNote(idx) {
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'remove_note=' + encodeURIComponent(idx)
    }).then(() => location.reload());
}
function expandNote(idx) {
    if (window.allNotes && window.allNotes[idx]) {
        var content = window.allNotes[idx];
        if (content && content.trim()) {
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–Ω–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ –∑–∞–º–µ—Ç–∫–∏
            var cleanContent = content;
            var nameHeaderMatch = content.match(/<div class="npc-name-header">([^<]+)<\/div>/i);
            if (nameHeaderMatch) {
                // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–º–µ–Ω–∏ –∏–∑ –Ω–∞—á–∞–ª–∞
                cleanContent = content.replace(/<div class="npc-name-header">[^<]+<\/div>/i, '');
                // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
                cleanContent = cleanContent.replace(/^\s+/, '');
            }
            
            document.getElementById('modal-content').innerHTML = cleanContent;
            document.getElementById('modal-bg').classList.add('active');
            document.getElementById('modal-save').style.display = 'none';
        }
    }
}
// –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ JS
window.allNotes = <?php echo json_encode($_SESSION['notes'], JSON_UNESCAPED_UNICODE); ?>;
// Debug: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
if (window.allNotes) {
    window.allNotes.forEach((n, i) => {
        let plain = n.replace(/<[^>]+>/g, '\n');
        let lines = plain.split(/\n/).map(l => l.trim()).filter(Boolean);
        
        // –ò—â–µ–º –∏–º—è NPC –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
        let nameMatch = n.match(/<div class="npc-name-header">([^<]+)<\/div>/i);
        let headerMatch = n.match(/<div class="npc-modern-header">([^<]+)<\/div>/i);
        let nameLine = lines.find(l => /^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/i.test(l));
        
        let preview = '';
        if (nameMatch) {
            preview = nameMatch[1].trim();
        } else if (headerMatch) {
            preview = headerMatch[1].trim();
        } else if (nameLine) {
            let match = nameLine.match(/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:\s*(.+)$/i);
            preview = match ? match[2].trim() : nameLine;
        } else {
            // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
            for (let line of lines) {
                if (line && !/^(–æ–ø–∏—Å–∞–Ω–∏–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—á–µ—Ä—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å|–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|–∫–ª–∞—Å—Å|—Ä–∞—Å–∞|—É—Ä–æ–≤–µ–Ω—å|–ø—Ä–æ—Ñ–µ—Å—Å–∏—è)/i.test(line)) {
                    preview = line;
                    break;
                }
            }
            if (!preview && lines.length) {
                preview = lines[0];
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        preview = preview.replace(/^–æ–ø–∏—Å–∞–Ω–∏–µ\s+/i, '').replace(/^\s*‚Äî\s*/, '').replace(/^npc\s+/i, '');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è
        if (nameMatch || headerMatch) {
            let words = preview.split(/\s+/);
            if (words.length > 1) {
                preview = words[0];
            }
        }
        
        console.log('–ó–∞–º–µ—Ç–∫–∞', i, '–ø—Ä–µ–≤—å—é:', preview || '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    });
}
// --- –ß–∞—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
document.querySelector('form').onsubmit = function(e) {
    e.preventDefault();
    var msg = this.message.value.trim();
    if (!msg) return false;
    fetch('ai.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'prompt=' + encodeURIComponent(msg) + '&type=chat'
    })
    .then(r => r.json())
    .then(data => {
        if (data && data.result) {
            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            location.reload();
        } else {
            alert(data.error || '–û—à–∏–±–∫–∞ AI');
        }
    });
    return false;
};
</script>
