<?php
session_start();
// --- –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ ---
$SECRET_CODE = 'dndmaster';
if (!isset($_SESSION['access_granted'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['secret_code'])) {
        if (trim($_POST['secret_code']) === $SECRET_CODE) {
            $_SESSION['access_granted'] = true;
            header('Location: index.php');
            exit;
        } else {
            $error = '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!';
        }
    }
    echo '<!DOCTYPE html><html lang="ru"><head><meta charset="UTF-8"><title>–í—Ö–æ–¥</title><style>body{background:#f8ecd0;font-family:Roboto,sans-serif;display:flex;align-items:center;justify-content:center;height:100vh;}form{background:#fffbe6;border:2px solid #a67c52;border-radius:12px;padding:32px 28px;box-shadow:0 4px 24px #0002;}input{padding:10px 18px;border-radius:8px;border:2px solid #a67c52;font-size:1.1em;}button{padding:10px 22px;border-radius:8px;border:2px solid #7c4a02;background:#a67c52;color:#fffbe6;font-size:1.1em;cursor:pointer;margin-left:8px;}button:hover{background:#7c4a02;color:#ffe0a3;}h2{margin-bottom:18px;}label{font-size:1.1em;}</style></head><body><form method="post"><h2>–í—Ö–æ–¥ –≤ DnD Copilot</h2><label>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:<br><input type="password" name="secret_code" autofocus required></label><button type="submit">–í–æ–π—Ç–∏</button>';
    if (isset($error)) echo '<div style="color:#b71c1c;margin-top:12px;">'.$error.'</div>';
    echo '</form></body></html>';
    exit;
}

if (isset($_GET['curltest'])) {
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}
if (isset($_GET['curltest2'])) {
    $apiKey = 'sk-1e898ddba737411e948af435d767e893';
    $data = [
        'model' => 'deepseek-chat',
        'messages' => [
            ['role' => 'system', 'content' => '–ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'],
            ['role' => 'user', 'content' => '–°–∫–∞–∂–∏: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.']
        ]
    ];
    $ch = curl_init('https://api.deepseek.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . $apiKey,
        'User-Agent: DnD-PHP-Test'
    ]);
    $result = curl_exec($ch);
    $err = curl_error($ch);
    curl_close($ch);
    echo "CURL RESULT: " . htmlspecialchars($result) . "<br>ERROR: " . htmlspecialchars($err);
    exit;
}

// --- –ó–∞–º–µ—Ç–∫–∏ ---
if (!isset($_SESSION['notes'])) {
    $_SESSION['notes'] = [];
}
if (isset($_POST['add_note']) && isset($_POST['note_content'])) {
    $_SESSION['notes'][] = trim($_POST['note_content']);
    exit('OK');
}
if (isset($_POST['remove_note'])) {
    $idx = (int)$_POST['remove_note'];
    if (isset($_SESSION['notes'][$idx])) {
        array_splice($_SESSION['notes'], $idx, 1);
    }
    exit('OK');
}

// --- –ë—ã—Å—Ç—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AJAX ---
if (isset($_POST['fast_action'])) {
    $action = $_POST['fast_action'];
    // --- –ö–æ—Å—Ç–∏ ---
    if ($action === 'dice_result') {
        $dice = $_POST['dice'] ?? '1d20';
        $label = $_POST['label'] ?? '';
        if (preg_match('/^(\d{1,2})d(\d{1,3})$/', $dice, $m)) {
            $count = (int)$m[1]; $sides = (int)$m[2];
            $results = [];
            for ($i = 0; $i < $count; $i++) $results[] = rand(1, $sides);
            $sum = array_sum($results);
            $out = "–ë—Ä–æ—Å–æ–∫: $dice\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: " . implode(', ', $results) . "\n–°—É–º–º–∞: $sum";
            if ($label) $out .= "\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: $label";
            echo nl2br(htmlspecialchars($out));
            exit;
        } else {
            echo '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–±–æ–≤!';
            exit;
        }
    }
    echo '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ';
    exit;
}

// --- –ß–∞—Ç ---
if (!isset($_SESSION['chat'])) {
    $_SESSION['chat'] = [];
}
if (isset($_GET['reset'])) {
    $_SESSION['chat'] = [];
    header("Location: index.php");
    exit;
}

// --- –ù–æ–≤—ã–π systemInstruction —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ ---
$systemInstruction = "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Ç–µ—Ä–∞ DnD. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞, –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –±–ª–æ–∫–æ–≤.\n–°—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É, –∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n–ò–º—è: ...\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ...\n–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ...\n–°–ª–∞–±–æ—Å—Ç—å: ...\n–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: –û—Ä—É–∂–∏–µ: ... –£—Ä–æ–Ω: ... –•–∏—Ç—ã: ... –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ...\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–û—Ä—É–∂–∏–µ, –£—Ä–æ–Ω, –•–∏—Ç—ã, –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –∏ –≤—Å–µ–≥–¥–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º –±–ª–æ–∫–æ–º. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –Ω–∞–ø–∏—à–∏ ‚Äò-‚Äô. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.";
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['message']) && !isset($_POST['add_note']) && !isset($_POST['remove_note'])) {
    $userMessage = trim($_POST['message']);
    if ($userMessage !== '') {
        if (empty($_SESSION['chat']) || $_SESSION['chat'][0]['role'] !== 'system') {
            array_unshift($_SESSION['chat'], ['role' => 'system', 'content' => $systemInstruction]);
        }
        $_SESSION['chat'][] = ['role' => 'user', 'content' => $userMessage];
        $apiKey = 'sk-1e898ddba737411e948af435d767e893';
        $apiUrl = 'https://api.deepseek.com/v1/chat/completions';
        $messages = array_map(function($msg) {
            return ['role' => $msg['role'], 'content' => $msg['content']];
        }, $_SESSION['chat']);
        $data = [
            'model' => 'deepseek-chat',
            'messages' => $messages
        ];
        $ch = curl_init($apiUrl);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: application/json',
            'Authorization: Bearer ' . $apiKey
        ]);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        $response = curl_exec($ch);
        curl_close($ch);
        $result = json_decode($response, true);
        $aiMessage = $result['choices'][0]['message']['content'] ?? '[–û—à–∏–±–∫–∞ AI]';
        $aiMessage = preg_replace('/[*_`>#\-]+/', '', $aiMessage);
        $aiMessage = str_replace(['"', "'", '‚Äú', '‚Äù', '¬´', '¬ª'], '', $aiMessage);
        $aiMessage = preg_replace('/\n{2,}/', "\n", $aiMessage);
        $aiMessage = preg_replace('/\s{3,}/', "\n", $aiMessage);
        $lines = explode("\n", $aiMessage);
        $formatted = [];
        foreach ($lines as $line) {
            $line = trim($line);
            if (mb_strlen($line) > 90) {
                $formatted = array_merge($formatted, str_split($line, 80));
            } else {
                $formatted[] = $line;
            }
        }
        $aiMessage = implode("\n", $formatted);
        $_SESSION['chat'][] = ['role' => 'assistant', 'content' => $aiMessage];
    }
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
$fastBtns = '';
$fastBtns .= '<button class="fast-btn" onclick="openDiceStep1()">üé≤ –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π</button>';
$fastBtns .= '<button class="fast-btn" onclick="openNpcStep1()">üó£Ô∏è NPC</button>';

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º system) ---
$chatMsgs = '';
foreach ($_SESSION['chat'] as $msg) {
    if ($msg['role'] === 'system') continue;
    $who = $msg['role'] === 'user' ? '–í—ã' : 'AI';
    $class = $msg['role'];
    $chatMsgs .= '<div class="msg ' . $class . '"><b>' . $who . ':</b> ' . nl2br(htmlspecialchars($msg['content'])) . '</div>';
}

// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∑–∞–º–µ—Ç–æ–∫ ---
$notesBlock = '';
foreach ($_SESSION['notes'] as $i => $note) {
    // –ò—â–µ–º –∏–º—è NPC –≤ –∑–∞–º–µ—Ç–∫–µ
    $plain = strip_tags(str_replace(['<br>', "\n"], "\n", $note));
    $lines = array_filter(array_map('trim', explode("\n", $plain)));
    $nameLine = '';
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
    if (preg_match('/<div class="npc-name-header">([^<]+)<\/div>/iu', $note, $matches)) {
        $nameLine = trim($matches[1]);
    } else {
        // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        foreach ($lines as $line) {
            if (preg_match('/^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/iu', $line)) {
                $nameLine = $line;
                break;
            }
        }
    }
    
    $previewSrc = $nameLine ?: (count($lines) ? $lines[0] : '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
    // –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ–≤—å—é –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ 3 —Å–ª–æ–≤
    $words = preg_split('/\s+/', $previewSrc);
    if (count($words) > 3) {
        $preview = implode(' ', array_slice($words, 0, 3)) . '‚Ä¶';
    } else if (mb_strlen($previewSrc) > 30) {
        $preview = mb_substr($previewSrc, 0, 30) . '‚Ä¶';
    } else {
        $preview = $previewSrc;
    }
    $notesBlock .= '<div class="note-item" onclick="expandNote(' . $i . ')">' . htmlspecialchars($preview, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') . '<button class="note-remove" onclick="event.stopPropagation();removeNote(' . $i . ')">√ó</button></div>';
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
$template = file_get_contents(__DIR__ . '/template.html');
$template = str_replace('{{fast_buttons}}', $fastBtns, $template);
$template = str_replace('{{chat_messages}}', $chatMsgs, $template);
$template = str_replace('{{notes_block}}', $notesBlock, $template);
echo $template;
?>
<script>
// --- Dice Modal Steps ---
function openDiceStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Å—Ç–∏:</b><div class="mini-menu-btns">' +
        ['d3','d4','d6','d8','d10','d12','d20','d100'].map(d => `<button onclick=\'openDiceStep2("${d}")\' class=\'fast-btn\'>${d}</button>`).join(' ') + '</div>'
    );
    document.getElementById('modal-save').style.display = 'none';
}
function openDiceStep2(dice) {
    showModal(`<b class="mini-menu-title">–°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤ ${dice}?</b><div class="npc-level-wrap"><input type=number id=dice-count value=1 min=1 max=20 style=\'width:60px\'></div><div class="npc-level-wrap"><input type=text id=dice-label placeholder=\'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\' style=\'margin-top:8px;width:90%\'></div><button class=\'fast-btn\' onclick=\'getDiceResult("${dice}")\'>–ë—Ä–æ—Å–∏—Ç—å</button>`);
    document.getElementById('modal-save').style.display = 'none';
}
function getDiceResult(dice) {
    let count = document.getElementById('dice-count').value;
    let label = document.getElementById('dice-label').value;
    let diceStr = count + dice;
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'fast_action=dice_result&dice=' + encodeURIComponent(diceStr) + '&label=' + encodeURIComponent(label)
    })
    .then(r => r.text())
    .then(txt => {
        document.getElementById('modal-content').innerHTML = formatResultSegments(txt, false);
        document.getElementById('modal-save').style.display = '';
        document.getElementById('modal-save').onclick = function() { saveNote(txt); closeModal(); };
    });
}
// --- NPC Modal Steps ---
const npcRaces = ['–ß–µ–ª–æ–≤–µ–∫','–≠–ª—å—Ñ','–ì–Ω–æ–º','–ü–æ–ª—É–æ—Ä–∫','–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫','–¢–∏—Ñ–ª–∏–Ω–≥','–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π','–ü–æ–ª—É—ç–ª—å—Ñ','–î–≤–æ—Ä—Ñ','–ì–æ–±–ª–∏–Ω','–û—Ä–∫','–ö–æ–±–æ–ª—å–¥','–Ø—â–µ—Ä–æ–ª—é–¥','–ì–æ–±–ª–∏–Ω','–ì–Ω–æ–º','–•–æ–±–±–∏—Ç'];
const npcClasses = ['–ë–µ–∑ –∫–ª–∞—Å—Å–∞','–í–æ–∏–Ω','–ü–∞–ª–∞–¥–∏–Ω','–ö–æ–ª–¥—É–Ω','–ú–∞–≥','–†–∞–∑–±–æ–π–Ω–∏–∫','–°–ª–µ–¥–æ–ø—ã—Ç','–ñ—Ä–µ—Ü','–ë–∞—Ä–¥','–í–∞—Ä–≤–∞—Ä','–ü–ª—É—Ç','–ú–æ–Ω–∞—Ö','–ß–∞—Ä–æ–¥–µ–π','–î—Ä—É–∏–¥'];
// –£–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π - AI —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç
let npcRace = '', npcClass = '', npcProf = '', npcLevel = 1;
let lastGeneratedParams = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function openNpcStep1() {
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É NPC:</b><div class="mini-menu-btns">' + npcRaces.map(r => `<button onclick=\'openNpcStep2("${r}")\' class=\'fast-btn\'>${r}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStep2(race) {
    npcRace = race;
    showModal('<b class="mini-menu-title">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å NPC:</b><div class="mini-menu-btns">' + npcClasses.map(c => `<button onclick=\'openNpcStepLevel("${c}")\' class=\'fast-btn\'>${c}</button>`).join(' ') + '</div>');
    document.getElementById('modal-save').style.display = 'none';
}
function openNpcStepLevel(cls) {
    npcClass = cls;
    showModal('<b class="mini-menu-title">–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å NPC (1-20):</b><div class="npc-level-wrap"><input type=number id=npc-level value=1 min=1 max=20 style=\'width:60px\'></div><button class=\'fast-btn\' onclick=\'generateNpcWithLevel()\'>–°–æ–∑–¥–∞—Ç—å NPC</button>');
    document.getElementById('modal-save').style.display = 'none';
}
// --- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ ---
window.uniqueTraders = [];
fetch('pdf/d100_unique_traders.json')
  .then(r => r.json())
  .then(data => { window.uniqueTraders = data; });
function fetchNpcFromAI(race, npcClass, prof, level) {
    showModal('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC...');
    fetch('pdf/d100_unique_traders.json')
      .then(r => r.json())
      .then(json => {
        // 1. –ò–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let name = '';
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—ã
        const raceNames = {
            '—á–µ–ª–æ–≤–µ–∫': ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ï–ª–µ–Ω–∞', '–ú–∏—Ö–∞–∏–ª', '–ê–Ω–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞—Ä–∏—è', '–°–µ—Ä–≥–µ–π', '–û–ª—å–≥–∞', '–ê–Ω–¥—Ä–µ–π', '–¢–∞—Ç—å—è–Ω–∞'],
            '—ç–ª—å—Ñ': ['–õ–∏—Ä–∞–Ω', '–ê—ç–ª–∏—É—Å', '–¢–∞–ª–∞—Å', '–°–∏–ª—å–≤–∞–Ω–∞', '–≠–ª—Ä–æ–Ω–¥', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–õ–µ–≥–æ–ª–∞—Å', '–ê—Ä–≤–µ–Ω', '–¢—Ä–∞–Ω–¥—É–∏–ª', '–ö–µ–ª–µ–±—Ä–∏–∞–Ω'],
            '–≥–Ω–æ–º': ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–ë–∞–ª–∏–Ω', '–î–æ—Ä–∏–Ω', '–ù–æ—Ä–∏', '–ë–∏—Ñ—É—Ä', '–ë–æ—Ñ—É—Ä', '–ë–æ–º–±—É—Ä', '–î–≤–∞–ª–∏–Ω', '–û–∏–Ω'],
            '–ø–æ–ª—É–æ—Ä–∫': ['–ì—Ä–æ–º', '–£—Ä–≥–∞—à', '–ö—Ä–∞–≥', '–®–∞–∫–∞', '–ú–æ–≥', '–ì–∞—Ä', '–¢–æ—Ä–≥', '–ó—É–≥', '–†—É–≥', '–ë—É–≥'],
            '–ø–æ–ª—É—Ä–æ—Å–ª–∏–∫': ['–ë–∏–ª—å–±–æ', '–§—Ä–æ–¥–æ', '–°—ç–º', '–ü–∏–ø–ø–∏–Ω', '–ú–µ—Ä—Ä–∏', '–¢–æ–º', '–î–∏–∫', '–ì–∞—Ä—Ä–∏', '–†–æ—Ä–∏', '–ù–æ—Ä–∏'],
            '—Ç–∏—Ñ–ª–∏–Ω–≥': ['–ó–∞—Ä–∞', '–ú–∞–ª–∏–∫', '–ê—à', '–õ—é—Ü–∏—Ñ–µ—Ä', '–ë–µ–ª', '–ö–µ–π–Ω', '–ê–∑–∞–∑–µ–ª—å', '–ú–∞–º–º–æ–Ω', '–õ–µ–≤–∏–∞—Ñ–∞–Ω', '–ê—Å–º–æ–¥–µ–π'],
            '–¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π': ['–î—Ä–∞–∫—Å', '–†–µ–∫—Å', '–¢–æ—Ä–Ω', '–°–∫–∞–π', '–ë–ª–µ–π–∑', '–§—Ä–æ—Å—Ç', '–≠–º–±–µ—Ä', '–°—Ç–æ—Ä–º', '–§–∞–Ω–≥', '–ö–ª–æ–¥'],
            '–ø–æ–ª—É—ç–ª—å—Ñ': ['–≠–ª—Ä–æ–Ω', '–ê—Ä–∞–≥–æ—Ä–Ω', '–ê—Ä–≤–µ–Ω', '–≠–ª—Ä–æ–Ω–¥', '–ö–µ–ª–µ–±—Ä–∏–∞–Ω', '–≠–ª—Ä–æ–Ω–¥', '–ì–∞–ª–∞–¥—Ä–∏—ç–ª—å', '–õ–µ–≥–æ–ª–∞—Å', '–¢—Ä–∞–Ω–¥—É–∏–ª', '–°–∏–ª—å–≤–∞–Ω–∞'],
            '–¥–≤–æ—Ä—Ñ': ['–¢–æ—Ä–∏–Ω', '–ì–∏–º–ª–∏', '–ë–∞–ª–∏–Ω', '–î–æ—Ä–∏–Ω', '–ù–æ—Ä–∏', '–ë–∏—Ñ—É—Ä', '–ë–æ—Ñ—É—Ä', '–ë–æ–º–±—É—Ä', '–î–≤–∞–ª–∏–Ω', '–û–∏–Ω'],
            '–≥–æ–±–ª–∏–Ω': ['–°–Ω–∏–∫', '–ì–æ–±', '–ù–∏–±', '–ó–æ–≥', '–†–∞—Ç', '–°–∫—Ä–∏—Ç', '–ì—Ä–∏–º', '–¢–≤–∏—á', '–°–∫–≤–∞–±', '–ì—Ä–∏–∑'],
            '–æ—Ä–∫': ['–ì—Ä–æ–º', '–£—Ä–≥–∞—à', '–ö—Ä–∞–≥', '–®–∞–∫–∞', '–ú–æ–≥', '–ì–∞—Ä', '–¢–æ—Ä–≥', '–ó—É–≥', '–†—É–≥', '–ë—É–≥'],
            '–∫–æ–±–æ–ª—å–¥': ['–°–Ω–∏–∫', '–ì–æ–±', '–ù–∏–±', '–ó–æ–≥', '–†–∞—Ç', '–°–∫—Ä–∏—Ç', '–ì—Ä–∏–º', '–¢–≤–∏—á', '–°–∫–≤–∞–±', '–ì—Ä–∏–∑'],
            '—è—â–µ—Ä–æ–ª—é–¥': ['–ó–∞—Ä', '–ö–µ—à', '–¢–∞–ª', '–†–µ–∫—Å', '–°–∫–∞–π', '–¢–æ—Ä–Ω', '–§–∞–Ω–≥', '–ö–ª–æ–¥', '–ë–ª–µ–π–∑', '–§—Ä–æ—Å—Ç'],
            '—Ö–æ–±–±–∏—Ç': ['–ë–∏–ª—å–±–æ', '–§—Ä–æ–¥–æ', '–°—ç–º', '–ü–∏–ø–ø–∏–Ω', '–ú–µ—Ä—Ä–∏', '–¢–æ–º', '–î–∏–∫', '–ì–∞—Ä—Ä–∏', '–†–æ—Ä–∏', '–ù–æ—Ä–∏']
        };
        
        // –í—ã–±–∏—Ä–∞–µ–º –∏–º—è –ø–æ —Ä–∞—Å–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
        let raceKey = race ? race.toLowerCase() : '—á–µ–ª–æ–≤–µ–∫';
        let namePool = raceNames[raceKey] || raceNames['—á–µ–ª–æ–≤–µ–∫'];
        name = namePool[Math.floor(Math.random() * namePool.length)];
        // 2. –ß–µ—Ä—Ç—ã, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        let trait = '';
        if (json.data && json.data.traits && Array.isArray(json.data.traits) && json.data.traits.length > 0) {
          trait = json.data.traits[Math.floor(Math.random() * json.data.traits.length)];
        }
        let motivation = '';
        if (json.data && json.data.motivation && Array.isArray(json.data.motivation) && json.data.motivation.length > 0) {
          motivation = json.data.motivation[Math.floor(Math.random() * json.data.motivation.length)];
        }
        let occ = '';
        if (json.data && json.data.occupations && Array.isArray(json.data.occupations) && json.data.occupations.length > 0) {
          occ = json.data.occupations[Math.floor(Math.random() * json.data.occupations.length)].name_ru;
        }
        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let contextBlock = '';
        if (name) contextBlock += `\n–ò–º—è: ${name} (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –∏–º—è –¥–ª—è NPC)`;
        if (trait) contextBlock += `\n–ß–µ—Ä—Ç–∞: ${trait}`;
        if (motivation) contextBlock += `\n–ú–æ—Ç–∏–≤–∞—Ü–∏—è: ${motivation}`;
        if (occ) contextBlock += `\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${occ}`;
        contextBlock += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏–¥—É–º–∞–π —Ü–µ–ª—å–Ω–æ–≥–æ NPC.';
        const systemInstruction = '–í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –±–µ–∑ markdown, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –∑–≤—ë–∑–¥–æ—á–µ–∫. –†–∞–∑–¥–µ–ª—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç NPC –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: –û–ø–∏—Å–∞–Ω–∏–µ, –í–Ω–µ—à–Ω–æ—Å—Ç—å, –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞. –í –±–ª–æ–∫–µ –ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏: –û—Ä—É–∂–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è], –£—Ä–æ–Ω: [—Ñ–æ—Ä–º–∞—Ç —É—Ä–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 1d6], –•–∏—Ç—ã: [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç–æ–≤], –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: [–æ—Å–Ω–æ–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å]. –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - —ç—Ç–æ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ö—Ä–∞–±—Ä—ã–π, –º—É–¥—Ä—ã–π, –≤—Å–ø—ã–ª—å—á–∏–≤—ã–π). –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ. –í–Ω–µ—à–Ω–æ—Å—Ç—å - –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞. –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è NPC. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!';
        const prompt = `–°–æ–∑–¥–∞–π NPC –¥–ª—è DnD. –†–∞—Å–∞: ${race}. –ö–ª–∞—Å—Å: ${npcClass}. –£—Ä–æ–≤–µ–Ω—å: ${level}. –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.${contextBlock}`;
        fetch('ai.php', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: 'prompt=' + encodeURIComponent(prompt) + '&system=' + encodeURIComponent(systemInstruction) + '&type=npc'
        })
        .then(r => r.json())
        .then(data => {
            if (data && data.result) {
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.log('AI Response:', data.result);
                document.getElementById('modal-content').innerHTML = formatNpcBlocks(data.result, name);
                document.getElementById('modal-save').style.display = '';
                document.getElementById('modal-save').onclick = function() { saveNote(document.getElementById('modal-content').innerHTML); closeModal(); };
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                let oldRegenerateBtn = document.querySelector('.modal-regenerate');
                if (oldRegenerateBtn) {
                    oldRegenerateBtn.remove();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                let regenerateBtn = document.createElement('button');
                regenerateBtn.className = 'modal-regenerate';
                regenerateBtn.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é';
                regenerateBtn.onclick = regenerateNpc;
                document.getElementById('modal').appendChild(regenerateBtn);
            } else {
                document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ AI: ' + (data.error || '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞') + ']</div>';
                document.getElementById('modal-save').style.display = 'none';
            }
        })
        .catch((e) => {
            document.getElementById('modal-content').innerHTML = '<div class="result-segment">[–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º]</div>';
            document.getElementById('modal-save').style.display = 'none';
        });
      });
}
function generateNpcWithLevel() {
    npcLevel = document.getElementById('npc-level').value;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    lastGeneratedParams = {
        race: npcRace,
        class: npcClass,
        level: npcLevel
    };
    // AI —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    fetchNpcFromAI(npcRace, npcClass, '', npcLevel);
}

function regenerateNpc() {
    if (lastGeneratedParams.race && lastGeneratedParams.class && lastGeneratedParams.level) {
        fetchNpcFromAI(lastGeneratedParams.race, lastGeneratedParams.class, '', lastGeneratedParams.level);
    } else {
        alert('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ NPC –ø–æ —Å–º—ã—Å–ª–æ–≤—ã–º –±–ª–æ–∫–∞–º ---
function formatNpcBlocks(txt, forcedName = '') {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    function extractAbilityName(text) {
        let lowerText = text.toLowerCase();
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (text.length > 60) {
            return null;
        }
        
        // –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        let abilityPatterns = [
            /(—Å—Ç–∏—Ö–∏–π–Ω\s+—É–¥–∞—Ä)/i,
            /(—è—Ä–æ—Å—Ç—å)/i,
            /(–Ω–µ–∏—Å—Ç–æ–≤–∞—è\s+—è—Ä–æ—Å—Ç—å)/i,
            /(–º–∞–≥–∏\w*\s+–±–∞—Ä–¥–∞)/i,
            /(–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ)/i,
            /(–º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è)/i,
            /(–±–æ–µ–≤–æ–π\s+—Å—Ç–∏–ª—å)/i,
            /(–∑–∞—â–∏—Ç–∞)/i,
            /(–∞—Ç–∞–∫–∞)/i,
            /(–æ–±–æ—Ä–æ–Ω–∞)/i,
            /(–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ)/i,
            /(–∏–Ω—Ç—É–∏—Ü–∏—è)/i,
            /(–º–∞–≥–∏\w*)/i,
            /(–∑–∞–∫–ª–∏–Ω–∞–Ω–∏\w*)/i,
            /(–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è\s+–∫–∞—Ä–∞)/i,
            /(–ª–µ—á–µ–Ω–∏–µ)/i,
            /(–∏—Å—Ü–µ–ª–µ–Ω–∏–µ)/i,
            /(–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å)/i,
            /(—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è)/i,
            /(–∏–ª–ª—é–∑–∏—è)/i,
            /(–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ)/i,
            /(–ø—Ä–∏–∑—ã–≤)/i,
            /(–∫–æ–Ω—Ç—Ä–æ–ª—å)/i,
            /(–ø—Ä–æ–∫–ª—è—Ç–∏–µ)/i,
            /(–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ)/i
        ];
        
        for (let pattern of abilityPatterns) {
            let match = text.match(pattern);
            if (match) {
                return match[1] || match[0];
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –Ω–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        if (/–º–∞–≥–∏|—Å—Ç–∏—Ö–∏–π–Ω|—É–¥–∞—Ä|—è—Ä–æ—Å—Ç—å|–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ|–∑–∞—â–∏—Ç–∞|–∞—Ç–∞–∫–∞|–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ|–∏–Ω—Ç—É–∏—Ü–∏—è|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|–ª–µ—á–µ–Ω–∏–µ|–∏—Å—Ü–µ–ª–µ–Ω–∏–µ|–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å|—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è|–∏–ª–ª—é–∑–∏—è|–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ|–ø—Ä–∏–∑—ã–≤|–∫–æ–Ω—Ç—Ä–æ–ª—å|–ø—Ä–æ–∫–ª—è—Ç–∏–µ|–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ|–∫–∞—Ä–∞|—Å—Ç–∏–ª—å/i.test(lowerText)) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 —Å–ª–æ–≤–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            let words = text.split(/\s+/).slice(0, 3).join(' ');
            if (words.length > 3 && words.length < 40) {
                return words;
            }
        }
        
        return null;
    }
    
    txt = txt.replace(/[\#\*`>]+/g, '');
    const blockTitles = [
        '–ò–º—è', '–†–∞—Å–∞', '–ö–ª–∞—Å—Å', '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞', '–°–ª–∞–±–æ—Å—Ç—å', '–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–í–Ω–µ—à–Ω–æ—Å—Ç—å', '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è'
    ];
    let blocks = [];
    let regex = /(–ò–º—è|–†–∞—Å–∞|–ö–ª–∞—Å—Å|–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ|–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–°–ª–∞–±–æ—Å—Ç—å|–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–í–Ω–µ—à–Ω–æ—Å—Ç—å|–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è)\s*[:\- ]/gi;
    let matches = [...txt.matchAll(regex)];
    if (matches.length > 0) {
        for (let i = 0; i < matches.length; i++) {
            let start = matches[i].index + matches[i][0].length;
            let end = (i + 1 < matches.length) ? matches[i + 1].index : txt.length;
            let title = matches[i][1];
            let content = txt.slice(start, end).replace(/^\s+|\s+$/g, '');
            if (content) blocks.push({ title, content });
        }
    }
    let name = '', race = '', cls = '', shortdesc = '', trait = '', weakness = '', summary = '', desc = '', appear = '', behavior = '', other = '';
    if (blocks.length === 0) {
        let sentences = txt.split(/(?<=[.!?])\s+/);
        if (sentences.length > 0) name = sentences[0];
        if (sentences.length > 1) shortdesc = sentences[1];
        if (sentences.length > 2) trait = sentences[2];
        if (sentences.length > 3) weakness = sentences[3];
        if (sentences.length > 4) summary = sentences[4];
        if (sentences.length > 5) desc = sentences.slice(5).join(' ');
    } else {
        for (let block of blocks) {
            if (block.title === '–ò–º—è') name = block.content;
            if (block.title === '–†–∞—Å–∞') race = block.content;
            if (block.title === '–ö–ª–∞—Å—Å') cls = block.content;
            if (block.title === '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ') shortdesc = block.content;
            if (block.title === '–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞') trait = block.content;
            if (block.title === '–°–ª–∞–±–æ—Å—Ç—å') weakness = block.content;
            if (block.title === '–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞') summary = block.content;
            if (block.title === '–û–ø–∏—Å–∞–Ω–∏–µ') desc = block.content;
            if (block.title === '–í–Ω–µ—à–Ω–æ—Å—Ç—å') appear = block.content;
            if (block.title === '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è') behavior = block.content;
        }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
    if (trait && /—Å–ª—É–∂–∏—Ç|–∞–∫–∞–¥–µ–º–∏|–æ–±—É—á–∞–µ—Ç|–ø—Ä–µ–ø–æ–¥–∞–µ—Ç|–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è|–º–µ—à–æ–∫|–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã|—Å—Ç–∞–Ω–æ–∫|—Ä–∞–∑–±–∏—Ä–∞–µ—Ç|–Ω–æ—Å–∏—Ç|–º–µ—á—Ç–∞–µ—Ç|—Å—Ç–∞—Ç—å|–∏–∑–≤–µ—Å—Ç–Ω—ã–º|—Å–æ–≤–µ—Ç–Ω–∏–∫–æ–º|–≤–ª–∏—è–Ω–∏—è|—Å–æ–±—ã—Ç–∏—è|—Ä–∞–±–æ—Ç–∞–µ—Ç|—Ä—ã–Ω–∫–µ|–ø—Ä–∏–∑–≤–∞–Ω–∏–µ|—Å–æ–±–∏—Ä–∞—Ç—å|—Å–ª—É—Ö–∏|–∏—Å—Ç–æ—Ä–∏–∏|—Ä—É–±–∏—Ç|–º—è—Å–æ|—É–ø—Ä–∞–≤–ª—è–µ—Ç|–ª–∞–≤–∫–æ–π|–ø—Ä–æ–¥–∞—ë—Ç|–ø—Ä–æ–¥—É–∫—Ç—ã|—Ç—Ä–∞–≤—ã|–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã/i.test(trait)) {
        // –≠—Ç–æ –Ω–µ —á–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∞ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ü–µ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        if (!desc) desc = trait;
        trait = '';
    }
    
    if (weakness && /–ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å|—Ü–µ–Ω–Ω—ã–π|—Å–æ—é–∑–Ω–∏–∫|–∑–Ω–∞–Ω–∏—è|—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏/i.test(weakness)) {
        // –≠—Ç–æ –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        if (!trait) trait = weakness;
        weakness = '';
    }
    
    // –ï—Å–ª–∏ –≤ —Å–ª–∞–±–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å - —É–±–∏—Ä–∞–µ–º —Å–ª–∞–±–æ—Å—Ç—å
    if (weakness && /–≤—ã—Å–æ–∫–∏–π|–Ω–∏–∑–∫–∏–π|—Å—Ç—Ä–æ–π–Ω—ã–π|–ø–æ–ª–Ω—ã–π|–≤–æ–ª–æ—Å—ã|–≥–ª–∞–∑–∞|–ª–∏—Ü–æ|–æ–¥–µ–∂–¥–∞/i.test(weakness)) {
        if (!appear) appear = weakness;
        weakness = '';
    }
    
    // –ï—Å–ª–∏ –≤ —á–µ—Ä—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (trait && /–≤—ã—Å–æ–∫–∏–π|–Ω–∏–∑–∫–∏–π|—Å—Ç—Ä–æ–π–Ω—ã–π|–ø–æ–ª–Ω—ã–π|–≤–æ–ª–æ—Å—ã|–≥–ª–∞–∑–∞|–ª–∏—Ü–æ|–æ–¥–µ–∂–¥–∞|–¥–ª–∏–Ω–Ω—ã–µ|–∫–æ—Ä–æ—Ç–∫–∏–µ|—Å–≤–µ—Ç–ª—ã–µ|—Ç–µ–º–Ω—ã–µ|–∫—Ä–µ–ø–∫–∏–π|–º—É–∂—á–∏–Ω–∞|–ø–ª–µ—á–∏|—Ä—É–∫–∏|—à—Ä–∞–º—ã|—Ñ–∞—Ä—Ç—É–∫|—Ö–≤–æ—Å—Ç|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—Å—Ç—Ä–æ–π–Ω–∞—è|–∂–µ–Ω—â–∏–Ω–∞|—Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏|—Ç—ë–º–Ω—ã–º–∏|–≤–æ–ª–æ—Å–∞–º–∏|–ø—É—á–æ–∫|—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º|–ø–ª–∞—Ç—å–µ|—Ñ–æ—Ä–º–∞—Ä–∏—è|—Å–ª–µ–¥—è—Ç|–¥–≤–∏–∂–µ–Ω–∏—è|—Ç–æ—á–Ω—ã|—ç–∫–æ–Ω–æ–º–Ω—ã|–∫—É–ª–æ–Ω|–∞–º—É–ª–µ—Ç|–∫–æ–ª—å—Ü–æ|–æ–∂–µ—Ä–µ–ª—å–µ|–±—Ä–∞—Å–ª–µ—Ç|–ø–æ—è—Å|–º–µ—à–æ–∫|–∑–µ—Ä–Ω–æ|–Ω–æ—Å–∏—Ç|–≤–∏—Å–∏—Ç|–∑–∞ —Å–ø–∏–Ω–æ–π|–Ω–∞ –ø–æ—è—Å–µ|–Ω–∞ —à–µ–µ/i.test(trait)) {
        if (!appear) appear = trait;
        trait = '';
    }
    
    // –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (desc && /—á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–≥—Ä—É–±–æ–≤–∞—Ç—ã–º|—é–º–æ—Ä|—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|–¥–∏–∫–∞—è|–Ω–µ–æ–±—É–∑–¥–∞–Ω–Ω–∞—è|–Ω–∞—Ç—É—Ä–∞|–±—Ä–∞–ª–∞ –≤–µ—Ä—Ö|–¥—É—Ö–æ–≤–Ω–æ–µ|–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ|–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏|–ø–æ–∫–∏–Ω—É–ª–∞|—Ö—Ä–∞–º|–Ω–∞–π—Ç–∏ –ø—É—Ç—å|—Å–æ—á–µ—Ç–∞—è|—è—Ä–æ—Å—Ç—å|–≤–∞—Ä–≤–∞—Ä–∞|–≥–ª—É–±–æ–∫—É—é —Å–≤—è–∑—å|–ø—Ä–∏—Ä–æ–¥–æ–π|–¥–∏–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è|–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞|–∑–∞—â–∏—Ç—É|—Å–≤—è—â–µ–Ω–Ω—ã—Ö|–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ|–±–∞–ª–∞–Ω—Å–∞|–ø–ª–µ–º–µ–Ω–µ–º|–ª–µ—Å–æ–º/i.test(desc.toLowerCase())) {
        if (!trait || trait === '-') {
            trait = desc;
            desc = '';
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            trait = trait + '. ' + desc;
            desc = '';
        }
    }
    if (!name && forcedName) name = forcedName;
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let summaryLines = [];
    let techParams = { weapon: '', damage: '', hp: '', ability: '' };
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–ª–æ–∫–µ "–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
    if (summary && summary !== '-') {
        let lines = summary.split(/\n|\r|‚Ä¢|-/).map(s => s.trim()).filter(Boolean);
        for (let line of lines) {
            if (/–æ—Ä—É–∂–∏–µ|weapon/i.test(line)) techParams.weapon = line;
            if (/—É—Ä–æ–Ω|damage/i.test(line)) techParams.damage = line;
            if (/—Ö–∏—Ç—ã|hp|–∑–¥–æ—Ä–æ–≤—å–µ|health/i.test(line)) techParams.hp = line;
            if (/—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|ability|skill/i.test(line)) techParams.ability = line;
        }
    }
    
    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–ª–æ–∫–µ, –∏—â–µ–º –≤–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–µ
    if (!techParams.weapon || !techParams.damage || !techParams.hp || !techParams.ability) {
        let allText = txt.toLowerCase();
        let lines = txt.split(/\n|\r|‚Ä¢|-/).map(s => s.trim()).filter(Boolean);
        
        for (let line of lines) {
            let lineLower = line.toLowerCase();
            // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (!techParams.weapon && /–æ—Ä—É–∂–∏–µ\s*:/i.test(lineLower) && line.length < 50) {
                techParams.weapon = line;
            }
            if (!techParams.damage && /—É—Ä–æ–Ω\s*:/i.test(lineLower) && line.length < 30) {
                techParams.damage = line;
            }
            if (!techParams.hp && /—Ö–∏—Ç—ã\s*:/i.test(lineLower) && line.length < 30) {
                techParams.hp = line;
            }
            if (!techParams.ability && /—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç\s*:/i.test(lineLower) && line.length < 100) {
                // –û—á–∏—â–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                let cleanAbility = line;
                
                // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (cleanAbility.includes('–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞')) {
                    cleanAbility = cleanAbility.replace(/–∫–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞.*?—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\s*:/i, '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:').trim();
                }
                
                // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è, —É—Ä–æ–Ω–∞ –∏ —Ö–∏—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (cleanAbility.includes('–û—Ä—É–∂–∏–µ:') && cleanAbility.includes('–•–∏—Ç—ã:')) {
                    cleanAbility = cleanAbility.replace(/–æ—Ä—É–∂–∏–µ\s*:.*?—Ö–∏—Ç—ã\s*:\s*\d+/i, '').trim();
                }
                
                // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ
                if (cleanAbility.includes('–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:') && cleanAbility.split('–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:').length > 2) {
                    let parts = cleanAbility.split('–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:');
                    cleanAbility = '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:' + parts[parts.length - 1];
                }
                
                // –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if (cleanAbility.includes('–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞')) {
                    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:" –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
                    let lastAbilityIndex = cleanAbility.lastIndexOf('–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:');
                    if (lastAbilityIndex !== -1) {
                        cleanAbility = cleanAbility.substring(lastAbilityIndex);
                    }
                    
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
                    if (cleanAbility.includes('–û—Ä—É–∂–∏–µ:')) {
                        let weaponIndex = cleanAbility.indexOf('–û—Ä—É–∂–∏–µ:');
                        if (weaponIndex > 0) {
                            cleanAbility = cleanAbility.substring(0, weaponIndex).trim();
                        }
                    }
                }
                
                // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if ((cleanAbility.match(/—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\s*:/gi) || []).length > 1) {
                    cleanAbility = cleanAbility.replace(/—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\s*:.*?—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\s*:/i, '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:').trim();
                }
                
                // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏
                cleanAbility = cleanAbility.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if (cleanAbility.length > 10) {
                                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (cleanAbility.includes('–û—Ä—É–∂–∏–µ:') || cleanAbility.includes('–•–∏—Ç—ã:') || cleanAbility.includes('–£—Ä–æ–Ω:')) {
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —É–±–∏—Ä–∞–µ–º –∏—Ö
                    let parts = cleanAbility.split(/\s+(?:–û—Ä—É–∂–∏–µ|–£—Ä–æ–Ω|–•–∏—Ç—ã):/);
                    if (parts.length > 1) {
                        cleanAbility = parts[0].trim();
                    }
                    
                    // –ï—Å–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–π, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                    if (cleanAbility.length < 5) {
                        cleanAbility = null;
                    }
                }
                    techParams.ability = cleanAbility;
                }
            }
        }
    }
    
    // 3. –ï—Å–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    if (!techParams.ability && desc) {
        let descLines = desc.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        for (let line of descLines) {
            // –ò—â–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            if (/—Å—Ç–∏—Ö–∏–π–Ω|—É–¥–∞—Ä|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|–º–∞–≥–∏|–∑–∞–∫–ª–∏–Ω–∞–Ω–∏|—è—Ä–æ—Å—Ç—å|–Ω–µ–∏—Å—Ç–æ–≤–∞—è|–±–∞—Ä–¥–∞|–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ|–º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è|—à–∞–Ω—Ç–∞–∂|–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä—É—é—â–µ–π|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏|–±–æ–µ–≤–æ–π —Å—Ç–∏–ª—å|–∑–∞—â–∏—Ç–∞|–∞—Ç–∞–∫–∞|–æ–±–æ—Ä–æ–Ω–∞|–ª–µ—á–µ–Ω–∏–µ|–∏—Å—Ü–µ–ª–µ–Ω–∏–µ|–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å|—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è|–∏–ª–ª—é–∑–∏—è|–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ|–ø—Ä–∏–∑—ã–≤|–∫–æ–Ω—Ç—Ä–æ–ª—å|–ø—Ä–æ–∫–ª—è—Ç–∏–µ|–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ|–∫–∞—Ä–∞/i.test(line.toLowerCase()) && line.length < 80) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                let abilityName = extractAbilityName(line);
                if (abilityName) {
                    techParams.ability = '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ' + abilityName;
                    break;
                }
            }
        }
    }
    
    // 4. –ï—Å–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–µ
    if (!techParams.ability) {
        let allText = txt.toLowerCase();
        let lines = txt.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        
        for (let line of lines) {
            let lineLower = line.toLowerCase();
            if (/—è—Ä–æ—Å—Ç—å|–Ω–µ–∏—Å—Ç–æ–≤–∞—è|–±–∞—Ä–¥–∞|–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ|–º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è|—à–∞–Ω—Ç–∞–∂|–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä—É—é—â–µ–π|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏|—Å—Ç–∏—Ö–∏–π–Ω|—É–¥–∞—Ä|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|–º–∞–≥–∏|–∑–∞–∫–ª–∏–Ω–∞–Ω–∏|–±–æ–µ–≤–æ–π —Å—Ç–∏–ª—å|–∑–∞—â–∏—Ç–∞|–∞—Ç–∞–∫–∞|–æ–±–æ—Ä–æ–Ω–∞|–ª–µ—á–µ–Ω–∏–µ|–∏—Å—Ü–µ–ª–µ–Ω–∏–µ|–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å|—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è|–∏–ª–ª—é–∑–∏—è|–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ|–ø—Ä–∏–∑—ã–≤|–∫–æ–Ω—Ç—Ä–æ–ª—å|–ø—Ä–æ–∫–ª—è—Ç–∏–µ|–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ|–∫–∞—Ä–∞/i.test(lineLower) && line.length > 5 && line.length < 80) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∞ –Ω–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                let abilityName = extractAbilityName(line);
                if (abilityName) {
                    techParams.ability = '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ' + abilityName;
                    break;
                }
            }
        }
    }
    
    // 5. –ò—â–µ–º –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–∞—Ö
    if (!appear || appear === '-') {
        let allText = txt.toLowerCase();
        let lines = txt.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        
        for (let line of lines) {
            let lineLower = line.toLowerCase();
            if (/–≤—ã—Å–æ–∫–∏–π|–Ω–∏–∑–∫–∏–π|—Å—Ç—Ä–æ–π–Ω—ã–π|–ø–æ–ª–Ω—ã–π|–≤–æ–ª–æ—Å—ã|–≥–ª–∞–∑–∞|–ª–∏—Ü–æ|–æ–¥–µ–∂–¥–∞|–¥–ª–∏–Ω–Ω—ã–µ|–∫–æ—Ä–æ—Ç–∫–∏–µ|—Å–≤–µ—Ç–ª—ã–µ|—Ç–µ–º–Ω—ã–µ|–∫—Ä–∞—Å–∏–≤—ã–µ|–æ—Å—Ç—Ä—ã–µ|—à–∏—Ä–æ–∫–∏–µ|—É–∑–∫–∏–µ|–±–æ—Ä–æ–¥–∞|—É—Å—ã|–º–æ—Ä—â–∏–Ω—ã|–∫—Ä–µ–ø–∫–∏–π|–º—É–∂—á–∏–Ω–∞|–ø–ª–µ—á–∏|—Ä—É–∫–∏|—à—Ä–∞–º—ã|—Ñ–∞—Ä—Ç—É–∫|—Ö–≤–æ—Å—Ç|—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–µ|–∑–∞–ø–ª–µ—Ç—ë–Ω–Ω—ã–µ|–∫–æ—Å—ã|—è—Ä–∫–æ-–≥–æ–ª—É–±—ã–µ|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—Å—Ç—Ä–æ–π–Ω–∞—è|–∂–µ–Ω—â–∏–Ω–∞|—Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏|—Ç—ë–º–Ω—ã–º–∏|–ø—É—á–æ–∫|—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º|–ø–ª–∞—Ç—å–µ|—Ñ–æ—Ä–º–∞—Ä–∏—è|—Å–ª–µ–¥—è—Ç|–¥–≤–∏–∂–µ–Ω–∏—è|—Ç–æ—á–Ω—ã|—ç–∫–æ–Ω–æ–º–Ω—ã|–º—É—Å–∫—É–ª–∏—Å—Ç—ã–º|—Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ–º|–ø–æ–∫—Ä—ã—Ç—ã–º|—Å—Ç–∞—Ä—ã–º–∏|—à—Ä–∞–º–∞–º–∏|–¥–æ—Å–ø–µ—Ö–æ–≤|–±—Ä–æ–Ω–∏/i.test(lineLower) && line.length > 5 && line.length < 250) {
                if (!appear || appear === '-') {
                    appear = line;
                } else {
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
                    appear = appear + '. ' + line;
                }
            }
        }
    }
    
    // 5.5. –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    if (!techParams.ability) {
        let allLines = txt.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        for (let line of allLines) {
            let lineLower = line.toLowerCase();
            if (/—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|–º–∞–≥–∏|—Å—Ç–∏—Ö–∏–π–Ω|—É–¥–∞—Ä|—è—Ä–æ—Å—Ç—å|–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ|–∑–∞—â–∏—Ç–∞|–∞—Ç–∞–∫–∞|–ª–µ—á–µ–Ω–∏–µ|–∏—Å—Ü–µ–ª–µ–Ω–∏–µ|–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å|—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è|–∏–ª–ª—é–∑–∏—è|–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ|–ø—Ä–∏–∑—ã–≤|–∫–æ–Ω—Ç—Ä–æ–ª—å|–ø—Ä–æ–∫–ª—è—Ç–∏–µ|–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ|–∫–∞—Ä–∞|—Å—Ç–∏–ª—å/i.test(lineLower) && line.length > 10 && line.length < 100) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 —Å–ª–æ–≤–∞ –∫–∞–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
                let words = line.split(/\s+/).slice(0, 4).join(' ');
                if (words.length > 5 && words.length < 50) {
                    techParams.ability = '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ' + words;
                    break;
                }
            }
        }
    }
    
    // 6. –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—á–µ–µ
    if (desc) {
        let descLines = desc.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        let cleanLines = [];
        let otherLines = [];
        
        for (let line of descLines) {
            let lineLower = line.toLowerCase();
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å
            if (/–æ—Ä—É–∂–∏–µ|—É—Ä–æ–Ω|—Ö–∏—Ç—ã|—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç|—Å—Ç–∏—Ö–∏–π–Ω|—É–¥–∞—Ä|d\d+|1d\d+|2d\d+/i.test(lineLower) || 
                line.length > 200 || 
                /—ç–ª—å—Ñ–∏–π–∫–∞|—ç–ª—å—Ñ|—á–µ–ª–æ–≤–µ–∫|–≥–Ω–æ–º|–ø–æ–ª—É–æ—Ä–∫|–ø–æ–ª—É—Ä–æ—Å–ª–∏–∫|—Ç–∏—Ñ–ª–∏–Ω–≥|–¥—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π|–ø–æ–ª—É—ç–ª—å—Ñ|–¥–≤–æ—Ä—Ñ|–≥–æ–±–ª–∏–Ω|–æ—Ä–∫|–∫–æ–±–æ–ª—å–¥|—è—â–µ—Ä–æ–ª—é–¥|—Ö–æ–±–±–∏—Ç|–∫–æ—Ç–æ—Ä—ã–π|–∫–æ—Ç–æ—Ä–∞—è|–Ω–∞—à–µ–ª|–Ω–∞—à–ª–∞|–æ—Å—Ç–∞–≤–∏–ª|–æ—Å—Ç–∞–≤–∏–ª–∞/i.test(lineLower)) {
                continue;
            }
            
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –ø—Ä–æ—á–µ–µ
            if (/—Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π|–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π|–Ω–∞–¥–º–µ–Ω–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π|–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π|–Ω–∞—Ö–æ–¥—á–∏–≤—ã–π|—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π|—Ö–∏—Ç—Ä—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π|–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π|—Ü–∏–Ω–∏—á–Ω—ã–π/i.test(lineLower)) {
                otherLines.push(line);
            } else {
                cleanLines.push(line);
            }
        }
        
        desc = cleanLines.join('. ');
        if (desc.endsWith('. ')) desc = desc.slice(0, -2);
        
        if (otherLines.length > 0) {
            other = otherLines.join('. ');
        }
    }
    
    // 7. –ï—Å–ª–∏ –≤ –±–ª–æ–∫–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" –µ—Å—Ç—å —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ "–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"
    if (other && /—á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞|–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π|–æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π|–Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π|–ø—Ä–µ–¥–∞–Ω–Ω—ã–π|–Ω–∞–∏–≤–Ω—ã–π|—Ö–∏—Ç—Ä—ã–π|–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π|–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π|–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π|–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π|—Ü–∏–Ω–∏—á–Ω—ã–π|–æ–±–∞—è—Ç–µ–ª—å–Ω—ã–π/i.test(other.toLowerCase())) {
        if (!trait || trait === '-') {
            trait = other;
            other = '';
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            trait = trait + '. ' + other;
            other = '';
        }
    }
    
    // 8. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (techParams.weapon) summaryLines.push(techParams.weapon);
    if (techParams.damage) summaryLines.push(techParams.damage);
    if (techParams.hp) summaryLines.push(techParams.hp);
    if (techParams.ability) summaryLines.push(techParams.ability);
    
    // 9. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const foundParams = [techParams.weapon, techParams.damage, techParams.hp, techParams.ability].filter(p => p).length;
    if (foundParams < 2) {
        return `<div class='npc-block-modern'><div class='npc-modern-header'>–û—à–∏–±–∫–∞</div><div class='npc-modern-block'>AI –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ù–∞–π–¥–µ–Ω–æ: ${foundParams}/4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC –µ—â—ë —Ä–∞–∑.</div></div>`;
    }
    function firstSentence(str) {
        if (!str || str === '-') return '';
        let m = str.match(/^[^.?!]+[.?!]?/);
        return m ? m[0].trim() : str.trim();
    }
    let out = '';
    out += `<div class='npc-block-modern'>`;
    out += `<div class='npc-modern-header'>${name ? name : 'NPC'}</div>`;
    if (race || cls) {
        out += `<div class='npc-modern-sub'>${race ? race : ''}${race && cls ? ' ¬∑ ' : ''}${cls ? cls : ''}</div>`;
    }
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (summaryLines.length) {
        let listHtml = '<ul class="npc-modern-list">' + summaryLines.map(s => `<li>${s}</li>`).join('') + '</ul>';
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>‚öîÔ∏è</span> <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>${listHtml}</div>`;
    }
    if (shortdesc && shortdesc !== '-') {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>${firstSentence(shortdesc)}</div>`;
    }
    if (trait && trait !== '-' && trait.trim().length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
        let traitLower = trait.toLowerCase();
        if (!/—Ñ–ª–µ–π—Ç–∞|–ø–æ—è—Å|–º–µ—à–æ–∫|–∑–µ—Ä–Ω–æ|–Ω–æ—Å–∏—Ç|–≤–∏—Å–∏—Ç|–∑–∞ —Å–ø–∏–Ω–æ–π|–Ω–∞ –ø–æ—è—Å–µ|–≤–Ω–µ—à–Ω–æ—Å—Ç—å|—Å—Ç—Ä–æ–π–Ω–∞—è|–∂–µ–Ω—â–∏–Ω–∞|—Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏|—Ç—ë–º–Ω—ã–º–∏|–≤–æ–ª–æ—Å–∞–º–∏|–ø—É—á–æ–∫|—Ñ–æ—Ä–º–µ–Ω–Ω–æ–º|–ø–ª–∞—Ç—å–µ|—Ñ–æ—Ä–º–∞—Ä–∏—è|–≥–ª–∞–∑–∞|—Å–ª–µ–¥—è—Ç|–¥–≤–∏–∂–µ–Ω–∏—è|—Ç–æ—á–Ω—ã|—ç–∫–æ–Ω–æ–º–Ω—ã|–∫—É–ª–æ–Ω|–∞–º—É–ª–µ—Ç|–∫–æ–ª—å—Ü–æ|–æ–∂–µ—Ä–µ–ª—å–µ|–±—Ä–∞—Å–ª–µ—Ç|–Ω–∞ —à–µ–µ/i.test(traitLower)) {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            let traitText = trait;
            if (trait.includes('–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞')) {
                traitText = trait.replace(/^—á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\s*/i, '').trim();
            }
            out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üß†</span> <b>–ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</b>${firstSentence(traitText)}</div>`;
        }
    }
    if (appear && appear !== '-') {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
        let appearText = appear;
        if (appear.includes('–í–Ω–µ—à–Ω–æ—Å—Ç—å')) {
            appearText = appear.replace(/^–≤–Ω–µ—à–Ω–æ—Å—Ç—å\s*/i, '').trim();
        }
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
        let sentences = appearText.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        let uniqueSentences = [];
        for (let sentence of sentences) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            let isDuplicate = uniqueSentences.some(s => {
                let sLower = s.toLowerCase();
                let sentenceLower = sentence.toLowerCase();
                return sLower.includes(sentenceLower.substring(0, 30)) || sentenceLower.includes(sLower.substring(0, 30));
            });
            if (!isDuplicate) {
                uniqueSentences.push(sentence);
            }
        }
        appearText = uniqueSentences.join('. ');
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üë§</span> <b>–í–Ω–µ—à–Ω–æ—Å—Ç—å</b>${firstSentence(appearText)}</div>`;
    }
    if (desc && desc !== '-') {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
        let descText = desc;
        if (desc.includes('–û–ø–∏—Å–∞–Ω–∏–µ')) {
            descText = desc.replace(/^–æ–ø–∏—Å–∞–Ω–∏–µ\s*/i, '').trim();
        }
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π
        let sentences = descText.split(/[.!?]/).map(s => s.trim()).filter(Boolean);
        let uniqueSentences = [];
        for (let sentence of sentences) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            let isDuplicate = uniqueSentences.some(s => {
                let sLower = s.toLowerCase();
                let sentenceLower = sentence.toLowerCase();
                return sLower.includes(sentenceLower.substring(0, 40)) || sentenceLower.includes(sLower.substring(0, 40));
            });
            if (!isDuplicate) {
                uniqueSentences.push(sentence);
            }
        }
        descText = uniqueSentences.join('. ');
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìú</span> <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>${firstSentence(descText)}</div>`;
    }
    if (behavior && behavior !== '-') {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üé≠</span> <b>–ü—Ä–æ—á–µ–µ</b>${firstSentence(behavior)}</div>`;
    }
    if (other && other !== '-' && other.trim().length > 0) {
        out += `<div class='npc-col-block'><span style='font-size:1.2em;'>üìã</span> <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>${firstSentence(other)}</div>`;
    }
    out += `</div>`;
    setTimeout(() => {
      document.querySelectorAll('.npc-desc-toggle-btn').forEach(btn => {
        btn.onclick = function() {
          let block = this.nextElementSibling;
          block.style.display = block.style.display === 'block' ? 'none' : 'block';
        };
      });
    }, 100);
    return out;
}
// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–æ–≤ ---
function formatResultSegments(txt, isNpc) {
    if (isNpc) {
        return formatNpcBlocks(txt);
    } else {
        // –î–ª—è –±—Ä–æ—Å–∫–æ–≤: –±—Ä–æ—Å–æ–∫+—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const lines = txt.split(/<br>|\n/).map(l => l.trim()).filter(Boolean);
        let out = '';
        if (lines.length) {
            out += `<div class="result-segment">${lines[0]}</div>`;
        }
        if (lines.length > 1) {
            out += `<div class="result-segment-alt">${lines[1]}</div>`;
        }
        if (lines.length > 2) {
            out += `<div class="result-segment">${lines.slice(2).join('<br>')}</div>`;
        }
        return out;
    }
}
// --- Modal & Notes ---
function showModal(content) {
    document.getElementById('modal-content').innerHTML = content;
    document.getElementById('modal-bg').classList.add('active');
}
function closeModal() {
    document.getElementById('modal-bg').classList.remove('active');
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    let regenerateBtn = document.querySelector('.modal-regenerate');
    if (regenerateBtn) {
        regenerateBtn.remove();
    }
}
document.getElementById('modal-close').onclick = closeModal;
document.getElementById('modal-bg').onclick = function(e) { if (e.target === this) closeModal(); };
function saveNote(content) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    var content = document.getElementById('modal-content').innerHTML;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è NPC –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    var headerElement = document.querySelector('.npc-modern-header');
    var npcName = headerElement ? headerElement.textContent.trim() : 'NPC';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    var noteWithName = '<div class="npc-name-header">' + npcName + '</div>' + content;
    
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'add_note=1&note_content=' + encodeURIComponent(noteWithName)
    }).then(() => location.reload());
}
function removeNote(idx) {
    fetch('', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: 'remove_note=' + encodeURIComponent(idx)
    }).then(() => location.reload());
}
function expandNote(idx) {
    if (window.allNotes && window.allNotes[idx]) {
        var content = window.allNotes[idx];
        if (content && content.trim()) {
            document.getElementById('modal-content').innerHTML = content;
            document.getElementById('modal-bg').classList.add('active');
            document.getElementById('modal-save').style.display = 'none';
        }
    }
}
// –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ JS
window.allNotes = <?php echo json_encode($_SESSION['notes'], JSON_UNESCAPED_UNICODE); ?>;
// Debug: –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
if (window.allNotes) {
    window.allNotes.forEach((n, i) => {
        let plain = n.replace(/<[^>]+>/g, '\n');
        let lines = plain.split(/\n/).map(l => l.trim()).filter(Boolean);
        let nameLine = lines.find(l => /^(–ò–º—è|Name|–ò–º—è NPC|–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s*:/i.test(l));
        let preview = nameLine || (lines.length ? lines[0] : '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
        console.log('–ó–∞–º–µ—Ç–∫–∞', i, '–ø—Ä–µ–≤—å—é:', preview);
    });
}
// --- –ß–∞—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ---
document.querySelector('form').onsubmit = function(e) {
    e.preventDefault();
    var msg = this.message.value.trim();
    if (!msg) return false;
    fetch('ai.php', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'prompt=' + encodeURIComponent(msg) + '&type=chat'
    })
    .then(r => r.json())
    .then(data => {
        if (data && data.result) {
            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            location.reload();
        } else {
            alert(data.error || '–û—à–∏–±–∫–∞ AI');
        }
    });
    return false;
};
</script>
