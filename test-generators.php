<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ - DnD Copilot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        
        .test-section {
            background: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .test-section h2 {
            color: #333;
            border-bottom: 2px solid #007cba;
            padding-bottom: 10px;
        }
        
        .test-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .test-btn {
            padding: 10px 20px;
            background: #007cba;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .test-btn:hover {
            background: #005a87;
        }
        
        .result-area {
            background: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            min-height: 100px;
            white-space: pre-wrap;
            font-family: monospace;
            font-size: 12px;
        }
        
        .success {
            color: #28a745;
        }
        
        .error {
            color: #dc3545;
        }
    </style>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ DnD Copilot</h1>
    
    <div class="test-section">
        <h2>‚öîÔ∏è –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</h2>
        <div class="test-buttons">
            <button class="test-btn" onclick="testCharacterGenerator()">–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</button>
            <button class="test-btn" onclick="testCharacterAPI()">–¢–µ—Å—Ç API –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</button>
        </div>
        <div id="character-result" class="result-area">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
    </div>
    
    <div class="test-section">
        <h2>üëπ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</h2>
        <div class="test-buttons">
            <button class="test-btn" onclick="testEnemyGenerator()">–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</button>
            <button class="test-btn" onclick="testEnemyAPI()">–¢–µ—Å—Ç API –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</button>
        </div>
        <div id="enemy-result" class="result-area">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
    </div>
    
    <div class="test-section">
        <h2>üé≤ –¢–µ—Å—Ç –±—Ä–æ—Å–∫–æ–≤ –∫–æ—Å—Ç–µ–π</h2>
        <div class="test-buttons">
            <button class="test-btn" onclick="testDiceRoll()">–¢–µ—Å—Ç –±—Ä–æ—Å–∫–∞ d20</button>
            <button class="test-btn" onclick="testMultipleDice()">–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤</button>
        </div>
        <div id="dice-result" class="result-area">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
    </div>

    <script>
        // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        async function testCharacterGenerator() {
            const resultDiv = document.getElementById('character-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...';
            
            try {
                const formData = new FormData();
                formData.append('race', 'human');
                formData.append('class', 'fighter');
                formData.append('level', '5');
                formData.append('alignment', 'lawful good');
                // AI —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                const response = await fetch('api/generate-hybrid-npc.php', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    resultDiv.innerHTML = '<span class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ!</span>\n\n' + 
                                        JSON.stringify(data.npc, null, 2);
                } else {
                    resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞:</span>\n\n' + 
                                        (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:</span>\n\n' + error.message;
            }
        }
        
        // –¢–µ—Å—Ç API –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        async function testCharacterAPI() {
            const resultDiv = document.getElementById('character-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...';
            
            try {
                const response = await fetch('api/dnd-api-working.php');
                const data = await response.text();
                
                resultDiv.innerHTML = '<span class="success">‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω</span>\n\n' + 
                                    '–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ' + data.length + ' —Å–∏–º–≤–æ–ª–æ–≤';
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ API:</span>\n\n' + error.message;
            }
        }
        
        // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
        async function testEnemyGenerator() {
            const resultDiv = document.getElementById('enemy-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...';
            
            try {
                const formData = new FormData();
                formData.append('threat_level', 'medium');
                formData.append('count', '2');
                formData.append('enemy_type', 'humanoid');
                formData.append('environment', 'forest');
                // AI —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                const response = await fetch('api/generate-enemies.php', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success) {
                    resultDiv.innerHTML = '<span class="success">‚úÖ –£—Å–ø–µ—à–Ω–æ!</span>\n\n' + 
                                        JSON.stringify(data.enemies, null, 2);
                } else {
                    resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞:</span>\n\n' + 
                                        (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:</span>\n\n' + error.message;
            }
        }
        
        // –¢–µ—Å—Ç API –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
        async function testEnemyAPI() {
            const resultDiv = document.getElementById('enemy-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...';
            
            try {
                const response = await fetch('https://www.dnd5eapi.co/api/monsters');
                const data = await response.json();
                
                resultDiv.innerHTML = '<span class="success">‚úÖ D&D API –¥–æ—Å—Ç—É–ø–µ–Ω</span>\n\n' + 
                                    '–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω—Å—Ç—Ä–æ–≤: ' + (data.count || 0) + '\n' +
                                    '–ü—Ä–∏–º–µ—Ä—ã: ' + data.results.slice(0, 5).map(m => m.name).join(', ');
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ D&D API:</span>\n\n' + error.message;
            }
        }
        
        // –¢–µ—Å—Ç –±—Ä–æ—Å–∫–æ–≤ –∫–æ—Å—Ç–µ–π
        async function testDiceRoll() {
            const resultDiv = document.getElementById('dice-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π...';
            
            try {
                const formData = new FormData();
                formData.append('fast_action', 'dice_result');
                formData.append('dice', '1d20');
                formData.append('label', '–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–æ—Å–æ–∫');
                
                const response = await fetch('index.php', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.text();
                
                resultDiv.innerHTML = '<span class="success">‚úÖ –ë—Ä–æ—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω</span>\n\n' + data;
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞:</span>\n\n' + error.message;
            }
        }
        
        // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
        async function testMultipleDice() {
            const resultDiv = document.getElementById('dice-result');
            resultDiv.textContent = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤...';
            
            try {
                const formData = new FormData();
                formData.append('fast_action', 'dice_result');
                formData.append('dice', '4d6');
                formData.append('label', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
                
                const response = await fetch('index.php', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.text();
                
                resultDiv.innerHTML = '<span class="success">‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±—Ä–æ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã</span>\n\n' + data;
            } catch (error) {
                resultDiv.innerHTML = '<span class="error">‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–æ–≤:</span>\n\n' + error.message;
            }
        }
    </script>
</body>
</html>
