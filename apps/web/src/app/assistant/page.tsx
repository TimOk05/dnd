"use client"

import { useState, useEffect, useRef } from "react"

const DEEPSEEK_API_KEY = "sk-1e898ddba737411e948af435d767e893"
const DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

interface Message {
  role: "user" | "assistant"
  content: string
}

const QUICK_COMMANDS = [
  {
    label: "üé≤ –ë—Ä–æ—Å–∏—Ç—å d20",
    prompt: "–ë—Ä–æ—Å—å d20 –∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –º–∞—Å—Ç–µ—Ä DnD."
  },
  {
    label: "üó£Ô∏è –°–æ–∑–¥–∞—Ç—å NPC",
    prompt: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª—É—á–∞–π–Ω–æ–≥–æ NPC –¥–ª—è DnD –∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
{
  "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
  "race": "–†–∞—Å–∞",
  "class": "–ö–ª–∞—Å—Å",
  "traits": "–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–∫–æ—Ä–æ—Ç–∫–æ)",
  "appearance": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
  "summary": "–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)"
}
–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`
  },
  {
    label: "üöó –°–æ–±—ã—Ç–∏–µ –≤ –¥–æ—Ä–æ–≥–µ",
    prompt: "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–∞–º–∏ –≤ –¥–æ—Ä–æ–≥–µ."
  }
]

const RACES = ["–ß–µ–ª–æ–≤–µ–∫", "–≠–ª—å—Ñ", "–î–≤–∞—Ä—Ñ", "–ü–æ–ª—É–æ—Ä–∫", "–ì–Ω–æ–º", "–¢–∏—Ñ–ª–∏–Ω–≥", "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", "–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π"];
const CLASSES = ["–í–æ–∏–Ω", "–ú–∞–≥", "–ü–∞–ª–∞–¥–∏–Ω", "–ü–ª—É—Ç", "–ñ—Ä–µ—Ü", "–°–ª–µ–¥–æ–ø—ã—Ç", "–ë–∞—Ä–¥", "–í–∞—Ä–≤–∞—Ä", "–ö–æ–ª–¥—É–Ω"];
const TRAITS = [
  "–•–∏—Ç—Ä—ã–π", "–ß–µ—Å—Ç–Ω—ã–π", "–°–∫—Ä—ã—Ç–Ω—ã–π", "–î–æ–±—Ä—ã–π", "–ñ–µ—Å—Ç–æ–∫–∏–π", "–í–µ—Å—ë–ª—ã–π", "–ú–æ–ª—á–∞–ª–∏–≤—ã–π", "–¶–∏–Ω–∏—á–Ω—ã–π", "–û—Ç–≤–∞–∂–Ω—ã–π"
];

export default function AssistantPage() {
  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const chatRef = useRef<HTMLDivElement>(null)

  // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º—ã NPC
  const [npcRace, setNpcRace] = useState("")
  const [npcClass, setNpcClass] = useState("")
  const [npcTrait, setNpcTrait] = useState("")

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ sessionStorage
  useEffect(() => {
    const saved = sessionStorage.getItem("assistant_chat")
    if (saved) setMessages(JSON.parse(saved))
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
  useEffect(() => {
    sessionStorage.setItem("assistant_chat", JSON.stringify(messages))
    // –°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight
    }
  }, [messages])

  const sendMessage = async (content: string) => {
    if (!content.trim()) return
    const newMessages = [...messages, { role: "user", content }]
    setMessages(newMessages)
    setIsLoading(true)
    setInput("")
    try {
      const res = await fetch(DEEPSEEK_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: newMessages.map(m => ({ role: m.role, content: m.content }))
        })
      })
      const data = await res.json()
      const aiMessage = data.choices?.[0]?.message?.content || "[–û—à–∏–±–∫–∞ AI]"
      setMessages([...newMessages, { role: "assistant", content: aiMessage }])
    } catch (e) {
      setMessages([...newMessages, { role: "assistant", content: "[–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI]" }])
    } finally {
      setIsLoading(false)
    }
  }

  // –ù–æ–≤—ã–π prompt –¥–ª—è AI —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const buildNpcPrompt = () => {
    let prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π NPC –¥–ª—è DnD.`
    if (npcRace) prompt += ` –†–∞—Å–∞: ${npcRace}.`
    if (npcClass) prompt += ` –ö–ª–∞—Å—Å: ${npcClass}.`
    if (npcTrait) prompt += ` –ß–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: ${npcTrait}.`
    prompt += ` –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤–Ω–µ—à–Ω–æ—Å—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∏ —Ç.–¥.) –ø—Ä–∏–¥—É–º–∞–π —Å–∞–º, —á—Ç–æ–±—ã NPC –±—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ —Ü–µ–ª—å–Ω—ã–º. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON-–æ–±—ä–µ–∫—Ç): { "name": "...", "race": "...", "class": "...", "traits": "...", "appearance": "...", "behavior": "...", "summary": "..." }`;
    return prompt;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä NPC
  function parseNpc(content: string) {
    // 1. –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      const match = content.match(/\{[\s\S]*\}/)
      if (match) {
        return { npc: JSON.parse(match[0]), warning: false };
      }
    } catch {}
    // 2. –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const getSection = (label: string) => {
      const regex = new RegExp(label + "[\n\r\s:‚Äì-]*([\s\S]*?)(?=\n[A-Z–ê-–Ø–Å][^\n]*:|\n[A-Z–ê-–Ø–Å][^\n]*\n|$)", "i");
      return content.match(regex)?.[1]?.trim() || null;
    };
    const name = content.match(/^[^\n]+/i)?.[0]?.trim();
    const description = getSection("–û–ø–∏—Å–∞–Ω–∏–µ");
    const appearance = getSection("–í–Ω–µ—à–Ω–æ—Å—Ç—å");
    const traits = getSection("–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞");
    const behavior = getSection("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è");
    const summary = getSection("–ö–æ—Ä–æ—Ç–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞");
    if (name || description || appearance || traits || behavior || summary) {
      return {
        npc: {
          name: name || "NPC",
          description,
          appearance,
          traits,
          behavior,
          summary
        },
        warning: false
      };
    }
    // 3. –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å
    return { npc: { raw: content }, warning: true };
  }

  const sendNpcRequest = () => {
    const prompt = buildNpcPrompt()
    sendMessage(prompt)
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 p-4">
      <div className="w-full max-w-xl bg-white rounded-lg shadow-lg p-6 flex flex-col" style={{ minHeight: 500 }}>
        <h1 className="text-2xl font-bold text-center mb-4">AI-–ß–∞—Ç –¥–ª—è DnD –ú–∞—Å—Ç–µ—Ä–∞</h1>
        {/* –ù–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –≤—ã–±–æ—Ä–∞ NPC */}
        <div className="mb-4 p-4 bg-yellow-50 rounded-lg border">
          <div className="mb-2 font-semibold">–°–æ–∑–¥–∞—Ç—å NPC —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:</div>
          <div className="flex flex-col gap-2 md:flex-row md:gap-4">
            <select className="border rounded px-2 py-1" value={npcRace} onChange={e => setNpcRace(e.target.value)}>
              <option value="">–†–∞—Å–∞ (–ª—é–±–æ–π)</option>
              {RACES.map(r => <option key={r} value={r}>{r}</option>)}
            </select>
            <select className="border rounded px-2 py-1" value={npcClass} onChange={e => setNpcClass(e.target.value)}>
              <option value="">–ö–ª–∞—Å—Å (–ª—é–±–æ–π)</option>
              {CLASSES.map(c => <option key={c} value={c}>{c}</option>)}
            </select>
            <select className="border rounded px-2 py-1" value={npcTrait} onChange={e => setNpcTrait(e.target.value)}>
              <option value="">–ß–µ—Ä—Ç–∞ (–ª—é–±–∞—è)</option>
              {TRAITS.map(t => <option key={t} value={t}>{t}</option>)}
            </select>
            <button
              className="bg-green-600 text-white px-4 py-2 rounded disabled:opacity-50"
              onClick={sendNpcRequest}
              disabled={isLoading}
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC
            </button>
          </div>
        </div>
        <div className="flex gap-2 mb-4 justify-center">
          {QUICK_COMMANDS.map(cmd => (
            <button
              key={cmd.label}
              className="px-3 py-2 bg-blue-100 hover:bg-blue-200 rounded text-sm"
              onClick={() => sendMessage(cmd.prompt)}
              disabled={isLoading}
            >
              {cmd.label}
            </button>
          ))}
        </div>
        <div
          ref={chatRef}
          className="flex-1 overflow-y-auto border rounded p-3 mb-4 bg-gray-50"
          style={{ minHeight: 300, maxHeight: 350 }}
        >
          {messages.length === 0 && (
            <div className="text-gray-400 text-center mt-16">–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å AI –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã</div>
          )}
          {messages.map((msg, i) => {
            if (msg.role === "assistant") {
              const { npc, warning } = parseNpc(msg.content);
              if (npc && !npc.raw) {
                return (
                  <div key={i} className="mb-3 flex justify-start">
                    <div className="rounded-lg px-4 py-2 max-w-[80%] bg-green-100 text-left w-full">
                      <div className="mb-2 text-lg font-bold">
                        {npc.name}
                      </div>
                      {npc.description && (
                        <div className="mb-2">
                          <span className="font-semibold">–û–ø–∏—Å–∞–Ω–∏–µ:</span> {npc.description}
                        </div>
                      )}
                      {npc.appearance && (
                        <div className="mb-2">
                          <span className="font-semibold">–í–Ω–µ—à–Ω–æ—Å—Ç—å:</span> {npc.appearance}
                        </div>
                      )}
                      {npc.traits && (
                        <div className="mb-2">
                          <span className="font-semibold">–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:</span>
                          <ul className="list-disc ml-5">
                            {npc.traits.split(/\n|\r|‚Ä¢|-/).map((t, idx) => t.trim() && <li key={idx}>{t.trim()}</li>)}
                          </ul>
                        </div>
                      )}
                      {npc.behavior && (
                        <div className="mb-2">
                          <span className="font-semibold">–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è:</span>
                          <ul className="list-disc ml-5">
                            {npc.behavior.split(/\n|\r|‚Ä¢|-/).map((b, idx) => b.trim() && <li key={idx}>{b.trim()}</li>)}
                          </ul>
                        </div>
                      )}
                      {npc.summary && (
                        <div className="mt-3 p-2 rounded bg-yellow-200 font-semibold text-center">
                          {npc.summary}
                        </div>
                      )}
                    </div>
                  </div>
                );
              }
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å
              return (
                <div key={i} className="mb-3 flex justify-start">
                  <div className="rounded-lg px-4 py-2 max-w-[80%] bg-red-100 text-left w-full">
                    <div className="mb-2 font-bold text-red-700">AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç</div>
                    <div className="mb-2 whitespace-pre-line">{npc.raw}</div>
                    <button
                      className="mt-2 bg-yellow-500 text-white px-3 py-1 rounded"
                      onClick={() => sendNpcRequest()}
                      disabled={isLoading}
                    >
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                    </button>
                  </div>
                </div>
              );
            }
            // –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return (
              <div key={i} className={`mb-3 flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                <div className={`rounded-lg px-4 py-2 max-w-[80%] ${msg.role === "user" ? "bg-blue-100 text-right" : "bg-green-100 text-left"}`}>
                  {msg.content}
                </div>
              </div>
            );
          })}
        </div>
        <form
          className="flex gap-2"
          onSubmit={e => {
            e.preventDefault()
            sendMessage(input)
          }}
        >
          <input
            className="flex-1 border rounded px-3 py-2"
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            value={input}
            onChange={e => setInput(e.target.value)}
            disabled={isLoading}
            autoFocus
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50"
            disabled={isLoading || !input.trim()}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        </form>
      </div>
    </div>
  )
}
