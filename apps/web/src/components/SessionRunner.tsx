'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/Button'
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/Card'
import { Input } from '@/components/ui/Input'
import { SessionStage, SessionMode, AISuggestion } from '@dm-copilot/shared'

interface SessionRunnerProps {
  sessionId?: string
}

const SESSION_STAGES: { value: SessionStage; label: string; description: string }[] = [
  { value: 'HOOK', label: '–ó–∞—Ü–µ–ø–∫–∞', description: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è' },
  { value: 'EXPLORATION', label: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', description: '–ò–∑—É—á–µ–Ω–∏–µ –º–∏—Ä–∞' },
  { value: 'COMBAT', label: '–ë–æ–π', description: '–°—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã' },
  { value: 'SOCIAL', label: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ', description: '–î–∏–ø–ª–æ–º–∞—Ç–∏—è –∏ —Ç–æ—Ä–≥–æ–≤–ª—è' },
  { value: 'PUZZLE', label: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', description: '–ó–∞–≥–∞–¥–∫–∏ –∏ –ª–æ–≤—É—à–∫–∏' },
  { value: 'CLIMAX', label: '–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è', description: '–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ' },
  { value: 'RESOLUTION', label: '–†–∞–∑–≤—è–∑–∫–∞', description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è' }
]

const SUGGESTION_TYPES = [
  { type: 'plot_twist', label: '–ü–æ–≤–æ—Ä–æ—Ç —Å—é–∂–µ—Ç–∞', icon: 'üé≠' },
  { type: 'npc_dialogue', label: '–î–∏–∞–ª–æ–≥ NPC', icon: 'üó£Ô∏è' },
  { type: 'scene_description', label: '–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã', icon: 'üè∞' },
  { type: 'loot_suggestion', label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ª—É—Ç–∞', icon: 'üíé' },
  { type: 'skill_check', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–æ–≤', icon: 'üé≤' }
]

export default function SessionRunner({ sessionId }: SessionRunnerProps) {
  const [currentStage, setCurrentStage] = useState<SessionStage>('HOOK')
  const [masterNotes, setMasterNotes] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [suggestions, setSuggestions] = useState<AISuggestion[]>([])
  const [selectedSuggestionType, setSelectedSuggestionType] = useState<string>('plot_twist')

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (sessionId) {
      loadSession(sessionId)
    }
  }, [sessionId])

  const loadSession = async (id: string) => {
    try {
      const response = await fetch(`/api/sessions/${id}`)
      if (response.ok) {
        const session = await response.json()
        setCurrentStage(session.stage)
        setMasterNotes(session.notes || '')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error)
    }
  }

  const updateSessionStage = async (stage: SessionStage) => {
    if (!sessionId) return

    try {
      const response = await fetch(`/api/sessions/${sessionId}/stage`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ stage })
      })

      if (response.ok) {
        setCurrentStage(stage)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞:', error)
    }
  }

  const saveMasterNotes = async () => {
    if (!sessionId) return

    try {
      await fetch(`/api/sessions/${sessionId}/notes`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notes: masterNotes })
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', error)
    }
  }

  const generateSuggestion = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/orchestrate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          context: {
            sessionStage: currentStage,
            masterNotes,
            moduleSummary: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥—É–ª—è –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±–∞–∑—ã',
            recentEvents: [],
            relevantChunks: [],
            tableData: []
          },
          templateType: selectedSuggestionType
        })
      })

      if (response.ok) {
        const data = await response.json()
        setSuggestions(prev => [data.suggestion, ...prev.slice(0, 4)]) // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
      } else {
        const error = await response.json()
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏ */}
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-primary">–°–µ—Å—Å–∏—è D&D</h1>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => window.history.back()}>
            –ù–∞–∑–∞–¥
          </Button>
          <Button variant="primary">
            –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π */}
        <div className="space-y-6">
          {/* –≠—Ç–∞–ø —Å–µ—Å—Å–∏–∏ */}
          <Card>
            <CardHeader>
              <CardTitle>–≠—Ç–∞–ø —Å–µ—Å—Å–∏–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {SESSION_STAGES.map((stage) => (
                  <Button
                    key={stage.value}
                    variant={currentStage === stage.value ? 'primary' : 'outline'}
                    className="w-full justify-start"
                    onClick={() => updateSessionStage(stage.value)}
                  >
                    <div className="text-left">
                      <div className="font-medium">{stage.label}</div>
                      <div className="text-sm opacity-75">{stage.description}</div>
                    </div>
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* –ó–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ */}
          <Card>
            <CardHeader>
              <CardTitle>–ó–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <textarea
                value={masterNotes}
                onChange={(e) => setMasterNotes(e.target.value)}
                onBlur={saveMasterNotes}
                placeholder="–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –ø–ª–∞–Ω—ã, –∏–¥–µ–∏..."
                className="w-full h-32 p-3 border rounded-lg resize-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
            </CardContent>
          </Card>
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
        <div className="space-y-6">
          {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
          <Card>
            <CardHeader>
              <CardTitle>AI –ü–æ–¥—Å–∫–∞–∑–∫–∏</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
              <div>
                <label className="block text-sm font-medium mb-2">–¢–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏</label>
                <div className="grid grid-cols-2 gap-2">
                  {SUGGESTION_TYPES.map((type) => (
                    <Button
                      key={type.type}
                      variant={selectedSuggestionType === type.type ? 'primary' : 'outline'}
                      size="sm"
                      onClick={() => setSelectedSuggestionType(type.type)}
                    >
                      <span className="mr-2">{type.icon}</span>
                      {type.label}
                    </Button>
                  ))}
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
              <Button
                onClick={generateSuggestion}
                disabled={isLoading}
                className="w-full"
                variant="primary"
              >
                {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É'}
              </Button>
            </CardContent>
          </Card>

          {/* –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ */}
          <Card>
            <CardHeader>
              <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫</CardTitle>
            </CardHeader>
            <CardContent>
              {suggestions.length === 0 ? (
                <p className="text-center text-gray-500 py-8">
                  –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                </p>
              ) : (
                <div className="space-y-4">
                  {suggestions.map((suggestion, index) => (
                    <div key={index} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <span className="text-sm font-medium text-primary">
                          {SUGGESTION_TYPES.find(t => t.type === suggestion.type)?.label}
                        </span>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => copyToClipboard(suggestion.content)}
                        >
                          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                      </div>
                      <div className="text-sm whitespace-pre-wrap">
                        {suggestion.content}
                      </div>
                      <div className="text-xs text-gray-500 mt-2">
                        {new Date(suggestion.metadata.timestamp).toLocaleString()}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="space-y-6">
          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <Card>
            <CardHeader>
              <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => {
                  const dice = Math.floor(Math.random() * 20) + 1
                  alert(`üé≤ –í—ã–ø–∞–ª–æ: ${dice}`)
                }}
              >
                üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ (d20)
              </Button>
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => window.open('/tables/tavern_names/random', '_blank')}
              >
                üè™ –°–ª—É—á–∞–π–Ω–∞—è —Ç–∞–≤–µ—Ä–Ω–∞
              </Button>
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => window.open('/tables/potions/random', '_blank')}
              >
                üß™ –°–ª—É—á–∞–π–Ω–æ–µ –∑–µ–ª—å–µ
              </Button>
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => window.open('/tables/npcs/random', '_blank')}
              >
                üó£Ô∏è –°–ª—É—á–∞–π–Ω—ã–π NPC
              </Button>
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => window.open('/tables/drinks/random', '_blank')}
              >
                üç∫ –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫
              </Button>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ */}
          <Card>
            <CardHeader>
              <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>–≠—Ç–∞–ø:</span>
                  <span className="font-medium">
                    {SESSION_STAGES.find(s => s.value === currentStage)?.label}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>–ü–æ–¥—Å–∫–∞–∑–æ–∫:</span>
                  <span className="font-medium">{suggestions.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>–í—Ä–µ–º—è:</span>
                  <span className="font-medium">--:--</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
