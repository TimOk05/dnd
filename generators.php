<?php
session_start();
require_once 'users.php';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
if (!isLoggedIn()) {
    header('Location: login.php');
    exit;
}

$currentUser = getCurrentUser();
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã - DnD Copilot</title>
    <link rel="icon" type="image/svg+xml" href="./favicon.svg">
    <meta name="theme-color" content="#a67c52">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="DnD Copilot">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=UnifrakturCook:wght@700&family=IM+Fell+English+SC&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #a67c52;
            --secondary-color: #f8ecd0;
            --accent-color: #7c4a02;
            --text-color: #2c1810;
            --background-color: #f5f5f5;
            --card-background: #ffffff;
            --success-color: #28a745;
            --error-color: #dc3545;
            --warning-color: #ffc107;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            background: var(--card-background);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-family: 'UnifrakturCook', cursive;
            font-size: 2.5em;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1em;
            color: var(--accent-color);
        }

        .generators-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }

        .generator-card {
            background: var(--card-background);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .generator-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        }

        .generator-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .generator-icon {
            font-size: 2em;
            margin-right: 15px;
        }

        .generator-title {
            font-size: 1.5em;
            font-weight: bold;
            color: var(--primary-color);
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: var(--accent-color);
        }

        select, input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        select:focus, input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .generate-btn {
            width: 100%;
            padding: 15px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .generate-btn:hover {
            background: var(--accent-color);
        }

        .generate-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .results {
            margin-top: 30px;
        }

        .result-card {
            background: var(--card-background);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            border-left: 5px solid var(--primary-color);
        }

        .result-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }

        .result-title {
            font-size: 1.3em;
            font-weight: bold;
            color: var(--primary-color);
        }

        .result-type {
            background: var(--secondary-color);
            color: var(--accent-color);
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }

        .result-content {
            line-height: 1.8;
        }

        .result-section {
            margin-bottom: 15px;
        }

        .result-section h4 {
            color: var(--accent-color);
            margin-bottom: 8px;
            font-size: 1.1em;
        }

        .collapsible {
            cursor: pointer;
            padding: 10px;
            background: var(--secondary-color);
            border-radius: 8px;
            margin-bottom: 10px;
            transition: background-color 0.3s ease;
        }

        .collapsible:hover {
            background: #e8d5b5;
        }

        .collapsible-content {
            display: none;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-top: 10px;
        }

        .loading {
            text-align: center;
            padding: 30px;
            color: var(--accent-color);
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid var(--primary-color);
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s ease-in-out infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .error {
            background: #f8d7da;
            color: var(--error-color);
            padding: 15px;
            border-radius: 8px;
            border-left: 5px solid var(--error-color);
        }

        .success {
            background: #d4edda;
            color: var(--success-color);
            padding: 15px;
            border-radius: 8px;
            border-left: 5px solid var(--success-color);
        }

        .back-btn {
            display: inline-block;
            padding: 12px 24px;
            background: var(--accent-color);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 20px;
            transition: background-color 0.3s ease;
        }

        .back-btn:hover {
            background: #5a3a01;
        }

        @media (max-width: 768px) {
            .generators-grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="index.php" class="back-btn">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–π</a>
        
        <div class="header">
            <h1>üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã DnD</h1>
            <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π</p>
        </div>

        <div class="generators-grid">
            <!-- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä NPC -->
            <div class="generator-card">
                <div class="generator-header">
                    <div class="generator-icon">üó£Ô∏è</div>
                    <div class="generator-title">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä NPC</div>
                </div>
                
                <form id="npcForm">
                    <div class="form-group">
                        <label for="npcRace">–†–∞—Å–∞:</label>
                        <select id="npcRace" name="race" required>
                            <option value="human">–ß–µ–ª–æ–≤–µ–∫</option>
                            <option value="elf">–≠–ª—å—Ñ</option>
                            <option value="dwarf">–î–≤–∞—Ä—Ñ</option>
                            <option value="halfling">–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫</option>
                            <option value="orc">–û—Ä–∫</option>
                            <option value="tiefling">–¢–∏—Ñ–ª–∏–Ω–≥</option>
                            <option value="dragonborn">–î—Ä–∞–∫–æ–Ω–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π</option>
                            <option value="gnome">–ì–Ω–æ–º</option>
                            <option value="half-elf">–ü–æ–ª—É—ç–ª—å—Ñ</option>
                            <option value="half-orc">–ü–æ–ª—É–æ—Ä–∫</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="npcClass">–ö–ª–∞—Å—Å:</label>
                        <select id="npcClass" name="class" required>
                            <option value="fighter">–í–æ–∏–Ω</option>
                            <option value="wizard">–í–æ–ª—à–µ–±–Ω–∏–∫</option>
                            <option value="rogue">–ü–ª—É—Ç</option>
                            <option value="cleric">–ñ—Ä–µ—Ü</option>
                            <option value="ranger">–°–ª–µ–¥–æ–ø—ã—Ç</option>
                            <option value="barbarian">–í–∞—Ä–≤–∞—Ä</option>
                            <option value="bard">–ë–∞—Ä–¥</option>
                            <option value="druid">–î—Ä—É–∏–¥</option>
                            <option value="monk">–ú–æ–Ω–∞—Ö</option>
                            <option value="paladin">–ü–∞–ª–∞–¥–∏–Ω</option>
                            <option value="sorcerer">–°–æ—Ä—Å–µ—Ä–µ—Ä</option>
                            <option value="warlock">–ö–æ–ª–¥—É–Ω</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="npcLevel">–£—Ä–æ–≤–µ–Ω—å:</label>
                        <input type="number" id="npcLevel" name="level" value="1" min="1" max="20" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="npcAlignment">–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</label>
                        <select id="npcAlignment" name="alignment" required>
                            <option value="lawful good">–ó–∞–∫–æ–Ω–Ω–æ-–¥–æ–±—Ä—ã–π</option>
                            <option value="neutral good">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–æ–±—Ä—ã–π</option>
                            <option value="chaotic good">–•–∞–æ—Ç–∏—á–Ω–æ-–¥–æ–±—Ä—ã–π</option>
                            <option value="lawful neutral">–ó–∞–∫–æ–Ω–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                            <option value="neutral">–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                            <option value="chaotic neutral">–•–∞–æ—Ç–∏—á–Ω–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π</option>
                            <option value="lawful evil">–ó–∞–∫–æ–Ω–Ω–æ-–∑–ª–æ–π</option>
                            <option value="neutral evil">–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–∑–ª–æ–π</option>
                            <option value="chaotic evil">–•–∞–æ—Ç–∏—á–Ω–æ-–∑–ª–æ–π</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="generate-btn">üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å NPC</button>
                </form>
            </div>

            <!-- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ -->
            <div class="generator-card">
                <div class="generator-header">
                    <div class="generator-icon">‚öîÔ∏è</div>
                    <div class="generator-title">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</div>
                </div>
                
                <form id="enemyForm">
                    <div class="form-group">
                        <label for="enemyThreat">–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:</label>
                        <select id="enemyThreat" name="threat_level" required>
                            <option value="easy">–õ–µ–≥–∫–∏–π</option>
                            <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="hard">–°–ª–æ–∂–Ω—ã–π</option>
                            <option value="deadly">–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemyCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                        <input type="number" id="enemyCount" name="count" value="1" min="1" max="10" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemyType">–¢–∏–ø –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</label>
                        <select id="enemyType" name="enemy_type">
                            <option value="">–õ—é–±–æ–π</option>
                            <option value="humanoid">–ì—É–º–∞–Ω–æ–∏–¥</option>
                            <option value="beast">–ó–≤–µ—Ä—å</option>
                            <option value="dragon">–î—Ä–∞–∫–æ–Ω</option>
                            <option value="undead">–ù–µ–∂–∏—Ç—å</option>
                            <option value="fiend">–î–µ–º–æ–Ω</option>
                            <option value="celestial">–ù–µ–±–æ–∂–∏—Ç–µ–ª—å</option>
                            <option value="construct">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç</option>
                            <option value="elemental">–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="enemyEnvironment">–û–∫—Ä—É–∂–µ–Ω–∏–µ:</label>
                        <select id="enemyEnvironment" name="environment">
                            <option value="">–õ—é–±–æ–µ</option>
                            <option value="forest">–õ–µ—Å</option>
                            <option value="mountain">–ì–æ—Ä—ã</option>
                            <option value="desert">–ü—É—Å—Ç—ã–Ω—è</option>
                            <option value="swamp">–ë–æ–ª–æ—Ç–æ</option>
                            <option value="underdark">–ü–æ–¥–∑–µ–º–µ–ª—å–µ</option>
                            <option value="urban">–ì–æ—Ä–æ–¥</option>
                            <option value="coastal">–ü–æ–±–µ—Ä–µ–∂—å–µ</option>
                            <option value="arctic">–ê—Ä–∫—Ç–∏–∫–∞</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="generate-btn">‚öîÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</button>
                </form>
            </div>
        </div>

        <div id="results" class="results"></div>
    </div>

    <script>
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC
    document.getElementById('npcForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '<div class="loading">üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è NPC...</div>';
        
        const formData = new FormData(this);
        
        try {
            const response = await fetch('api/generate-npc.php', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success && data.npc) {
                const npc = data.npc;
                resultsDiv.innerHTML = `
                    <div class="result-card">
                        <div class="result-header">
                            <div class="result-title">${npc.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π NPC'}</div>
                            <div class="result-type">NPC</div>
                        </div>
                        
                        <div class="result-content">
                            ${npc.description ? `
                                <div class="result-section">
                                    <h4>üìú –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                                    <p>${npc.description}</p>
                                </div>
                            ` : ''}
                            
                            ${npc.appearance ? `
                                <div class="result-section">
                                    <h4>üë§ –í–Ω–µ—à–Ω–æ—Å—Ç—å</h4>
                                    <p>${npc.appearance}</p>
                                </div>
                            ` : ''}
                            
                            ${npc.traits ? `
                                <div class="result-section">
                                    <h4>üé≠ –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞</h4>
                                    <p>${npc.traits}</p>
                                </div>
                            ` : ''}
                            
                            ${npc.technical_params && npc.technical_params.length > 0 ? `
                                <div class="result-section">
                                    <div class="collapsible" onclick="toggleCollapsible(this)">
                                        <h4>‚öîÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                                    </div>
                                    <div class="collapsible-content">
                                        <ul>
                                            ${npc.technical_params.map(param => `<li>${param}</li>`).join('')}
                                        </ul>
                                    </div>
                                </div>
                            ` : ''}
                            
                            <div class="result-section">
                                <h4>üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h4>
                                <p><strong>–†–∞—Å–∞:</strong> ${formData.get('race')} | <strong>–ö–ª–∞—Å—Å:</strong> ${formData.get('class')} | <strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${formData.get('level')} | <strong>–ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:</strong> ${formData.get('alignment')}</p>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                resultsDiv.innerHTML = `
                    <div class="error">
                        <h3>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NPC</h3>
                        <p>${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                    </div>
                `;
            }
        } catch (error) {
            resultsDiv.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</h3>
                    <p>${error.message}</p>
                </div>
            `;
        }
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
    document.getElementById('enemyForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = '<div class="loading">üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤...</div>';
        
        const formData = new FormData(this);
        
        try {
            const response = await fetch('api/generate-enemies.php', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success && data.enemies) {
                let enemiesHtml = '';
                
                data.enemies.forEach((enemy, index) => {
                    enemiesHtml += `
                        <div class="result-card">
                            <div class="result-header">
                                <div class="result-title">${enemy.name}</div>
                                <div class="result-type">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${index + 1}</div>
                            </div>
                            
                            <div class="result-content">
                                ${enemy.description ? `
                                    <div class="result-section">
                                        <h4>üìú –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                                        <p>${enemy.description}</p>
                                    </div>
                                ` : ''}
                                
                                ${enemy.tactics ? `
                                    <div class="result-section">
                                        <h4>üéØ –¢–∞–∫—Ç–∏–∫–∞</h4>
                                        <p>${enemy.tactics}</p>
                                    </div>
                                ` : ''}
                                
                                ${enemy.stats ? `
                                    <div class="result-section">
                                        <div class="collapsible" onclick="toggleCollapsible(this)">
                                            <h4>‚öîÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                                        </div>
                                        <div class="collapsible-content">
                                            <pre>${enemy.stats}</pre>
                                        </div>
                                    </div>
                                ` : ''}
                                
                                <div class="result-section">
                                    <h4>üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
                                    <p><strong>–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:</strong> ${data.threat_level} | <strong>–¢–∏–ø:</strong> ${enemy.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} | <strong>CR:</strong> ${enemy.challenge_rating || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                resultsDiv.innerHTML = enemiesHtml;
            } else {
                resultsDiv.innerHTML = `
                    <div class="error">
                        <h3>‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤</h3>
                        <p>${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                    </div>
                `;
            }
        } catch (error) {
            resultsDiv.innerHTML = `
                <div class="error">
                    <h3>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</h3>
                    <p>${error.message}</p>
                </div>
            `;
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–æ–≤
    function toggleCollapsible(element) {
        const content = element.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            content.style.display = 'block';
        }
    }
    </script>
</body>
</html>
